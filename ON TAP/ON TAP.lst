CCS PCM C Compiler, Version 5.112, 43599               26-Oct-23 12:38

               Filename:   C:\Users\defaultuser0.LAPTOP-POTNR7PE\OneDrive - hcmute.edu.vn\Desktop\VXL\ON TAP\ON TAP.lst

               ROM used:   1046 words (13%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           39 (11%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   34E
0003:  NOP
.................... #include<16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  DATA D3,30
0013:  DATA EE,33
0014:  DATA 20,22
0015:  DATA 61,37
0016:  DATA A0,18
0017:  DATA 32,10
0018:  DATA CC,22
0019:  DATA 44,00
001A:  DATA D4,30
001B:  DATA 74,10
001C:  DATA C4,30
001D:  DATA 6E,10
001E:  DATA 31,19
001F:  DATA 20,26
0020:  DATA 45,22
0021:  DATA 00,01
0022:  DATA D3,30
0023:  DATA EE,33
0024:  DATA 20,22
0025:  DATA E9,31
0026:  DATA 68,10
0027:  DATA 31,19
0028:  DATA 20,26
0029:  DATA 45,22
002A:  DATA 00,01
002B:  DATA D4,30
002C:  DATA 74,10
002D:  DATA C4,34
002E:  DATA 63,34
002F:  DATA A0,18
0030:  DATA 32,10
0031:  DATA CC,22
0032:  DATA 44,00
*
0079:  BTFSC  03.1
007A:  GOTO   07E
007B:  MOVLW  3D
007C:  MOVWF  04
007D:  BCF    03.7
007E:  CLRF   77
007F:  CLRF   78
0080:  CLRF   79
0081:  CLRF   7A
0082:  CLRF   3D
0083:  CLRF   3E
0084:  CLRF   3F
0085:  CLRF   40
0086:  MOVF   3C,W
0087:  IORWF  3B,W
0088:  IORWF  3A,W
0089:  IORWF  39,W
008A:  BTFSC  03.2
008B:  GOTO   0BC
008C:  MOVLW  20
008D:  MOVWF  41
008E:  BCF    03.0
008F:  RLF    35,F
0090:  RLF    36,F
0091:  RLF    37,F
0092:  RLF    38,F
0093:  RLF    3D,F
0094:  RLF    3E,F
0095:  RLF    3F,F
0096:  RLF    40,F
0097:  MOVF   3C,W
0098:  SUBWF  40,W
0099:  BTFSS  03.2
009A:  GOTO   0A5
009B:  MOVF   3B,W
009C:  SUBWF  3F,W
009D:  BTFSS  03.2
009E:  GOTO   0A5
009F:  MOVF   3A,W
00A0:  SUBWF  3E,W
00A1:  BTFSS  03.2
00A2:  GOTO   0A5
00A3:  MOVF   39,W
00A4:  SUBWF  3D,W
00A5:  BTFSS  03.0
00A6:  GOTO   0B6
00A7:  MOVF   39,W
00A8:  SUBWF  3D,F
00A9:  MOVF   3A,W
00AA:  BTFSS  03.0
00AB:  INCFSZ 3A,W
00AC:  SUBWF  3E,F
00AD:  MOVF   3B,W
00AE:  BTFSS  03.0
00AF:  INCFSZ 3B,W
00B0:  SUBWF  3F,F
00B1:  MOVF   3C,W
00B2:  BTFSS  03.0
00B3:  INCFSZ 3C,W
00B4:  SUBWF  40,F
00B5:  BSF    03.0
00B6:  RLF    77,F
00B7:  RLF    78,F
00B8:  RLF    79,F
00B9:  RLF    7A,F
00BA:  DECFSZ 41,F
00BB:  GOTO   08E
00BC:  MOVF   3D,W
00BD:  MOVWF  00
00BE:  INCF   04,F
00BF:  MOVF   3E,W
00C0:  MOVWF  00
00C1:  INCF   04,F
00C2:  MOVF   3F,W
00C3:  MOVWF  00
00C4:  INCF   04,F
00C5:  MOVF   40,W
00C6:  MOVWF  00
00C7:  RETURN
*
00EA:  MOVF   0B,W
00EB:  MOVWF  2D
00EC:  BCF    0B.7
00ED:  BSF    03.5
00EE:  BSF    03.6
00EF:  BSF    0C.7
00F0:  BSF    0C.0
00F1:  NOP
00F2:  NOP
00F3:  BCF    03.5
00F4:  BCF    03.6
00F5:  BTFSC  2D.7
00F6:  BSF    0B.7
00F7:  BSF    03.6
00F8:  MOVF   0C,W
00F9:  ANDLW  7F
00FA:  BTFSC  03.2
00FB:  GOTO   13E
00FC:  BCF    03.6
00FD:  MOVWF  2D
00FE:  BSF    03.6
00FF:  MOVF   0D,W
0100:  BCF    03.6
0101:  MOVWF  2E
0102:  BSF    03.6
0103:  MOVF   0F,W
0104:  BCF    03.6
0105:  MOVWF  2F
0106:  MOVF   2D,W
0107:  MOVWF  30
0108:  CALL   0C8
0109:  MOVF   2E,W
010A:  BSF    03.6
010B:  MOVWF  0D
010C:  BCF    03.6
010D:  MOVF   2F,W
010E:  BSF    03.6
010F:  MOVWF  0F
0110:  BCF    03.6
0111:  MOVF   0B,W
0112:  MOVWF  30
0113:  BCF    0B.7
0114:  BSF    03.5
0115:  BSF    03.6
0116:  BSF    0C.7
0117:  BSF    0C.0
0118:  NOP
0119:  NOP
011A:  BCF    03.5
011B:  BCF    03.6
011C:  BTFSC  30.7
011D:  BSF    0B.7
011E:  BSF    03.6
011F:  RLF    0C,W
0120:  RLF    0E,W
0121:  ANDLW  7F
0122:  BTFSC  03.2
0123:  GOTO   13E
0124:  BCF    03.6
0125:  MOVWF  2D
0126:  BSF    03.6
0127:  MOVF   0D,W
0128:  BCF    03.6
0129:  MOVWF  2E
012A:  BSF    03.6
012B:  MOVF   0F,W
012C:  BCF    03.6
012D:  MOVWF  2F
012E:  MOVF   2D,W
012F:  MOVWF  30
0130:  CALL   0C8
0131:  MOVF   2E,W
0132:  BSF    03.6
0133:  MOVWF  0D
0134:  BCF    03.6
0135:  MOVF   2F,W
0136:  BSF    03.6
0137:  MOVWF  0F
0138:  INCF   0D,F
0139:  BTFSC  03.2
013A:  INCF   0F,F
013B:  BCF    03.6
013C:  GOTO   0EA
013D:  BSF    03.6
013E:  BCF    03.6
013F:  RETURN
.................... 
.................... #list
.................... 
.................... #fuses intrc_io
.................... #use delay(clock=8M)
*
0055:  MOVLW  32
0056:  MOVWF  04
0057:  BCF    03.7
0058:  MOVF   00,W
0059:  BTFSC  03.2
005A:  GOTO   068
005B:  MOVLW  02
005C:  MOVWF  78
005D:  CLRF   77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  DECFSZ 78,F
0061:  GOTO   05D
0062:  MOVLW  97
0063:  MOVWF  77
0064:  DECFSZ 77,F
0065:  GOTO   064
0066:  DECFSZ 00,F
0067:  GOTO   05B
0068:  RETURN
.................... 
.................... #define lcd_rs pin_c5
.................... #define lcd_rw pin_c6
.................... #define lcd_e pin_c7
.................... #define output_lcd output_b
.................... #include<tv_lcd.c>
.................... void lcd_command(int8 a)
.................... {
....................       output_low(lcd_rw);
*
0033:  BCF    20.6
0034:  MOVF   20,W
0035:  BSF    03.5
0036:  MOVWF  07
0037:  BCF    03.5
0038:  BCF    07.6
....................       output_low(lcd_rs);
0039:  BCF    20.5
003A:  MOVF   20,W
003B:  BSF    03.5
003C:  MOVWF  07
003D:  BCF    03.5
003E:  BCF    07.5
....................       output_lcd(a);
003F:  BSF    03.5
0040:  CLRF   06
0041:  BCF    03.5
0042:  MOVF   2D,W
0043:  MOVWF  06
....................       output_high(lcd_e);
0044:  BCF    20.7
0045:  MOVF   20,W
0046:  BSF    03.5
0047:  MOVWF  07
0048:  BCF    03.5
0049:  BSF    07.7
....................       output_low(lcd_e);
004A:  BCF    20.7
004B:  MOVF   20,W
004C:  BSF    03.5
004D:  MOVWF  07
004E:  BCF    03.5
004F:  BCF    07.7
....................       delay_us(200);
0050:  MOVLW  85
0051:  MOVWF  77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  RETURN
.................... }
.................... void lcd_data(int8 a)
.................... {
....................       output_low(lcd_rw);
*
00C8:  BCF    20.6
00C9:  MOVF   20,W
00CA:  BSF    03.5
00CB:  MOVWF  07
00CC:  BCF    03.5
00CD:  BCF    07.6
....................       output_high(lcd_rs);
00CE:  BCF    20.5
00CF:  MOVF   20,W
00D0:  BSF    03.5
00D1:  MOVWF  07
00D2:  BCF    03.5
00D3:  BSF    07.5
....................       output_lcd(a);
00D4:  BSF    03.5
00D5:  CLRF   06
00D6:  BCF    03.5
00D7:  MOVF   30,W
00D8:  MOVWF  06
....................       output_high(lcd_e);
00D9:  BCF    20.7
00DA:  MOVF   20,W
00DB:  BSF    03.5
00DC:  MOVWF  07
00DD:  BCF    03.5
00DE:  BSF    07.7
....................       output_low(lcd_e);
00DF:  BCF    20.7
00E0:  MOVF   20,W
00E1:  BSF    03.5
00E2:  MOVWF  07
00E3:  BCF    03.5
00E4:  BCF    07.7
....................       delay_us(200);
00E5:  MOVLW  85
00E6:  MOVWF  77
00E7:  DECFSZ 77,F
00E8:  GOTO   0E7
00E9:  RETURN
.................... }
.................... void lcd_setup()
.................... {     
....................       lcd_command(0x38); delay_ms(5);
*
0069:  MOVLW  38
006A:  MOVWF  2D
006B:  CALL   033
006C:  MOVLW  05
006D:  MOVWF  32
006E:  CALL   055
....................       lcd_command(0x0c); 
006F:  MOVLW  0C
0070:  MOVWF  2D
0071:  CALL   033
....................       lcd_command(0x01); delay_ms(2);
0072:  MOVLW  01
0073:  MOVWF  2D
0074:  CALL   033
0075:  MOVLW  02
0076:  MOVWF  32
0077:  CALL   055
0078:  RETURN
.................... }
.................... 
.................... 
.................... signed int8 i;
.................... unsigned int8 tt=1;
.................... unsigned int32 y, speed = 100;
.................... 
.................... const unsigned int8 ma7doan[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
.................... 
.................... void sangdan(unsigned int16 speed)
.................... {
....................    for(i=12;i>=0;i--)
*
023A:  MOVLW  0C
023B:  MOVWF  21
023C:  BTFSC  21.7
023D:  GOTO   27A
....................    {
....................       y=0xfff>>i;
023E:  MOVLW  0F
023F:  MOVWF  24
0240:  MOVLW  FF
0241:  MOVWF  23
0242:  CLRF   25
0243:  CLRF   26
0244:  MOVF   21,W
0245:  MOVWF  31
0246:  BTFSC  03.2
0247:  GOTO   24F
0248:  BCF    03.0
0249:  RRF    26,F
024A:  RRF    25,F
024B:  RRF    24,F
024C:  RRF    23,F
024D:  DECFSZ 31,F
024E:  GOTO   248
....................       output_a(y);
024F:  BSF    03.5
0250:  CLRF   05
0251:  BCF    03.5
0252:  MOVF   23,W
0253:  MOVWF  05
....................       output_c(y>>8);
0254:  CLRF   35
0255:  MOVLW  00
0256:  MOVWF  20
0257:  BSF    03.5
0258:  CLRF   07
0259:  BCF    03.5
025A:  MOVF   24,W
025B:  MOVWF  07
....................       delay_ms(speed);
025C:  MOVF   30,W
025D:  MOVWF  31
025E:  INCF   31,F
025F:  DECF   31,F
0260:  BTFSC  03.2
0261:  GOTO   266
0262:  MOVLW  FF
0263:  MOVWF  32
0264:  CALL   055
0265:  GOTO   25F
0266:  MOVF   2F,W
0267:  MOVWF  32
0268:  CALL   055
....................       if(input(pin_e0)==0||input(pin_e1)==0||input(pin_e2)==0) break;
0269:  BSF    03.5
026A:  BSF    09.0
026B:  BCF    03.5
026C:  BTFSS  09.0
026D:  GOTO   277
026E:  BSF    03.5
026F:  BSF    09.1
0270:  BCF    03.5
0271:  BTFSS  09.1
0272:  GOTO   277
0273:  BSF    03.5
0274:  BSF    09.2
0275:  BCF    03.5
0276:  BTFSS  09.2
0277:  GOTO   27A
0278:  DECF   21,F
0279:  GOTO   23C
....................    }
027A:  BCF    0A.3
027B:  BCF    0A.4
027C:  GOTO   3DE (RETURN)
.................... }
.................... void tatdan(unsigned int16 speed)
.................... {
....................    for(i=12;i>=0;i--)
027D:  MOVLW  0C
027E:  MOVWF  21
027F:  BTFSC  21.7
0280:  GOTO   2C2
....................    {
....................       y=~(0xfff>>i);
0281:  MOVLW  0F
0282:  MOVWF  7A
0283:  MOVLW  FF
0284:  MOVWF  79
0285:  MOVF   21,W
0286:  MOVWF  77
0287:  BTFSC  03.2
0288:  GOTO   28E
0289:  BCF    03.0
028A:  RRF    7A,F
028B:  RRF    79,F
028C:  DECFSZ 77,F
028D:  GOTO   289
028E:  MOVF   79,W
028F:  XORLW  FF
0290:  MOVWF  23
0291:  MOVLW  FF
0292:  XORWF  7A,W
0293:  MOVWF  24
0294:  MOVLW  FF
0295:  MOVWF  25
0296:  MOVWF  26
....................       output_a(y);
0297:  BSF    03.5
0298:  CLRF   05
0299:  BCF    03.5
029A:  MOVF   23,W
029B:  MOVWF  05
....................       output_c(y>>8);
029C:  CLRF   35
029D:  MOVLW  00
029E:  MOVWF  20
029F:  BSF    03.5
02A0:  CLRF   07
02A1:  BCF    03.5
02A2:  MOVF   24,W
02A3:  MOVWF  07
....................       delay_ms(speed);
02A4:  MOVF   30,W
02A5:  MOVWF  31
02A6:  INCF   31,F
02A7:  DECF   31,F
02A8:  BTFSC  03.2
02A9:  GOTO   2AE
02AA:  MOVLW  FF
02AB:  MOVWF  32
02AC:  CALL   055
02AD:  GOTO   2A7
02AE:  MOVF   2F,W
02AF:  MOVWF  32
02B0:  CALL   055
....................       if(input(pin_e0)==0||input(pin_e1)==0||input(pin_e2)==0) break;
02B1:  BSF    03.5
02B2:  BSF    09.0
02B3:  BCF    03.5
02B4:  BTFSS  09.0
02B5:  GOTO   2BF
02B6:  BSF    03.5
02B7:  BSF    09.1
02B8:  BCF    03.5
02B9:  BTFSS  09.1
02BA:  GOTO   2BF
02BB:  BSF    03.5
02BC:  BSF    09.2
02BD:  BCF    03.5
02BE:  BTFSS  09.2
02BF:  GOTO   2C2
02C0:  DECF   21,F
02C1:  GOTO   27F
....................    }
02C2:  BCF    0A.3
02C3:  BCF    0A.4
02C4:  GOTO   3F0 (RETURN)
....................    
.................... }
.................... void sangdich(unsigned int16 speed)
.................... {
....................    for(i=12;i>=0;i--)
02C5:  MOVLW  0C
02C6:  MOVWF  21
02C7:  BTFSC  21.7
02C8:  GOTO   304
....................    {
....................       y=0x800>>i;
02C9:  MOVLW  08
02CA:  MOVWF  24
02CB:  CLRF   23
02CC:  CLRF   25
02CD:  CLRF   26
02CE:  MOVF   21,W
02CF:  MOVWF  31
02D0:  BTFSC  03.2
02D1:  GOTO   2D9
02D2:  BCF    03.0
02D3:  RRF    26,F
02D4:  RRF    25,F
02D5:  RRF    24,F
02D6:  RRF    23,F
02D7:  DECFSZ 31,F
02D8:  GOTO   2D2
....................       output_a(y);
02D9:  BSF    03.5
02DA:  CLRF   05
02DB:  BCF    03.5
02DC:  MOVF   23,W
02DD:  MOVWF  05
....................       output_c(y>>8);
02DE:  CLRF   35
02DF:  MOVLW  00
02E0:  MOVWF  20
02E1:  BSF    03.5
02E2:  CLRF   07
02E3:  BCF    03.5
02E4:  MOVF   24,W
02E5:  MOVWF  07
....................       delay_ms(speed);
02E6:  MOVF   30,W
02E7:  MOVWF  31
02E8:  INCF   31,F
02E9:  DECF   31,F
02EA:  BTFSC  03.2
02EB:  GOTO   2F0
02EC:  MOVLW  FF
02ED:  MOVWF  32
02EE:  CALL   055
02EF:  GOTO   2E9
02F0:  MOVF   2F,W
02F1:  MOVWF  32
02F2:  CALL   055
....................       if(input(pin_e0)==0||input(pin_e1)==0||input(pin_e2)==0) break;
02F3:  BSF    03.5
02F4:  BSF    09.0
02F5:  BCF    03.5
02F6:  BTFSS  09.0
02F7:  GOTO   301
02F8:  BSF    03.5
02F9:  BSF    09.1
02FA:  BCF    03.5
02FB:  BTFSS  09.1
02FC:  GOTO   301
02FD:  BSF    03.5
02FE:  BSF    09.2
02FF:  BCF    03.5
0300:  BTFSS  09.2
0301:  GOTO   304
0302:  DECF   21,F
0303:  GOTO   2C7
....................    }
0304:  BCF    0A.3
0305:  BCF    0A.4
0306:  GOTO   402 (RETURN)
.................... }
.................... void tatdich(unsigned int16 speed)
.................... {
....................    for(i=12;i>=0;i--)
0307:  MOVLW  0C
0308:  MOVWF  21
0309:  BTFSC  21.7
030A:  GOTO   34B
....................    {
....................       y=~(0x800>>i);
030B:  MOVLW  08
030C:  MOVWF  7A
030D:  CLRF   79
030E:  MOVF   21,W
030F:  MOVWF  77
0310:  BTFSC  03.2
0311:  GOTO   317
0312:  BCF    03.0
0313:  RRF    7A,F
0314:  RRF    79,F
0315:  DECFSZ 77,F
0316:  GOTO   312
0317:  MOVF   79,W
0318:  XORLW  FF
0319:  MOVWF  23
031A:  MOVLW  FF
031B:  XORWF  7A,W
031C:  MOVWF  24
031D:  MOVLW  FF
031E:  MOVWF  25
031F:  MOVWF  26
....................       output_a(y);
0320:  BSF    03.5
0321:  CLRF   05
0322:  BCF    03.5
0323:  MOVF   23,W
0324:  MOVWF  05
....................       output_c(y>>8);
0325:  CLRF   35
0326:  MOVLW  00
0327:  MOVWF  20
0328:  BSF    03.5
0329:  CLRF   07
032A:  BCF    03.5
032B:  MOVF   24,W
032C:  MOVWF  07
....................       delay_ms(speed);
032D:  MOVF   30,W
032E:  MOVWF  31
032F:  INCF   31,F
0330:  DECF   31,F
0331:  BTFSC  03.2
0332:  GOTO   337
0333:  MOVLW  FF
0334:  MOVWF  32
0335:  CALL   055
0336:  GOTO   330
0337:  MOVF   2F,W
0338:  MOVWF  32
0339:  CALL   055
....................       if(input(pin_e0)==0||input(pin_e1)==0||input(pin_e2)==0) break;
033A:  BSF    03.5
033B:  BSF    09.0
033C:  BCF    03.5
033D:  BTFSS  09.0
033E:  GOTO   348
033F:  BSF    03.5
0340:  BSF    09.1
0341:  BCF    03.5
0342:  BTFSS  09.1
0343:  GOTO   348
0344:  BSF    03.5
0345:  BSF    09.2
0346:  BCF    03.5
0347:  BTFSS  09.2
0348:  GOTO   34B
0349:  DECF   21,F
034A:  GOTO   309
....................    }
034B:  BCF    0A.3
034C:  BCF    0A.4
034D:  GOTO   414 (RETURN)
.................... }
.................... 
.................... void hienthi()
.................... {  
....................    lcd_setup();
*
0140:  CALL   069
....................    lcd_command(0x80+1);
0141:  MOVLW  81
0142:  MOVWF  2D
0143:  CALL   033
....................    lcd_data("Sang Dan 12 LED");
0144:  MOVLW  12
0145:  BSF    03.6
0146:  MOVWF  0D
0147:  MOVLW  00
0148:  MOVWF  0F
0149:  BCF    03.6
014A:  CALL   0EA
....................    lcd_command(0xc0+1);
014B:  MOVLW  C1
014C:  MOVWF  2D
014D:  CALL   033
....................    lcd_data("Tat Dan 12 LED");
014E:  MOVLW  1A
014F:  BSF    03.6
0150:  MOVWF  0D
0151:  MOVLW  00
0152:  MOVWF  0F
0153:  BCF    03.6
0154:  CALL   0EA
....................    lcd_command(0x94+1);
0155:  MOVLW  95
0156:  MOVWF  2D
0157:  CALL   033
....................    lcd_data("Sang Dich 12 LED");
0158:  MOVLW  22
0159:  BSF    03.6
015A:  MOVWF  0D
015B:  MOVLW  00
015C:  MOVWF  0F
015D:  BCF    03.6
015E:  CALL   0EA
....................    lcd_command(0xd4+1);
015F:  MOVLW  D5
0160:  MOVWF  2D
0161:  CALL   033
....................    lcd_data("Tat Dich 12 LED");
0162:  MOVLW  2B
0163:  BSF    03.6
0164:  MOVWF  0D
0165:  MOVLW  00
0166:  MOVWF  0F
0167:  BCF    03.6
0168:  CALL   0EA
....................    if(tt == 1)
0169:  DECFSZ 22,W
016A:  GOTO   171
....................    {
....................       lcd_command(0x80);
016B:  MOVLW  80
016C:  MOVWF  2D
016D:  CALL   033
....................       lcd_data(0x7e);
016E:  MOVLW  7E
016F:  MOVWF  30
0170:  CALL   0C8
....................    }
....................    if(tt == 2)
0171:  MOVF   22,W
0172:  SUBLW  02
0173:  BTFSS  03.2
0174:  GOTO   17B
....................    {
....................       lcd_command(0xc0);
0175:  MOVLW  C0
0176:  MOVWF  2D
0177:  CALL   033
....................       lcd_data(0x7e);
0178:  MOVLW  7E
0179:  MOVWF  30
017A:  CALL   0C8
....................    }
....................    if(tt == 3)
017B:  MOVF   22,W
017C:  SUBLW  03
017D:  BTFSS  03.2
017E:  GOTO   185
....................    {
....................       lcd_command(0x94);
017F:  MOVLW  94
0180:  MOVWF  2D
0181:  CALL   033
....................       lcd_data(0x7e);
0182:  MOVLW  7E
0183:  MOVWF  30
0184:  CALL   0C8
....................    }
....................    if(tt == 4)
0185:  MOVF   22,W
0186:  SUBLW  04
0187:  BTFSS  03.2
0188:  GOTO   18F
....................    {
....................       lcd_command(0xd4);
0189:  MOVLW  D4
018A:  MOVWF  2D
018B:  CALL   033
....................       lcd_data(0x7e);
018C:  MOVLW  7E
018D:  MOVWF  30
018E:  CALL   0C8
....................    }
018F:  RETURN
.................... }
.................... 
.................... void nutnhan()
.................... {
....................    if(input(pin_e0) == 0)
0190:  BSF    03.5
0191:  BSF    09.0
0192:  BCF    03.5
0193:  BTFSC  09.0
0194:  GOTO   1AA
....................    {
....................       delay_ms(20);
0195:  MOVLW  14
0196:  MOVWF  32
0197:  CALL   055
....................       if(input(pin_e0)==0)
0198:  BSF    03.5
0199:  BSF    09.0
019A:  BCF    03.5
019B:  BTFSC  09.0
019C:  GOTO   1AA
....................       {
....................          tt++;
019D:  INCF   22,F
....................          if(tt>4) tt = 1;
019E:  MOVF   22,W
019F:  SUBLW  04
01A0:  BTFSC  03.0
01A1:  GOTO   1A4
01A2:  MOVLW  01
01A3:  MOVWF  22
....................          hienthi();
01A4:  CALL   140
....................          while(input(pin_e0)==0);
01A5:  BSF    03.5
01A6:  BSF    09.0
01A7:  BCF    03.5
01A8:  BTFSS  09.0
01A9:  GOTO   1A5
....................       }
....................    }
....................    if(input(pin_e1) == 0)
01AA:  BSF    03.5
01AB:  BSF    09.1
01AC:  BCF    03.5
01AD:  BTFSC  09.1
01AE:  GOTO   1C1
....................    {
....................       delay_ms(20);
01AF:  MOVLW  14
01B0:  MOVWF  32
01B1:  CALL   055
....................       if(input(pin_e1)==0)
01B2:  BSF    03.5
01B3:  BSF    09.1
01B4:  BCF    03.5
01B5:  BTFSC  09.1
01B6:  GOTO   1C1
....................       {
....................          tt--;
01B7:  DECFSZ 22,F
....................          if(tt<1) tt = 4;
01B8:  GOTO   1BB
01B9:  MOVLW  04
01BA:  MOVWF  22
....................          hienthi();
01BB:  CALL   140
....................          while(input(pin_e1)==0);
01BC:  BSF    03.5
01BD:  BSF    09.1
01BE:  BCF    03.5
01BF:  BTFSS  09.1
01C0:  GOTO   1BC
....................       }
....................    }
....................    if(input(pin_e2) == 0)
01C1:  BSF    03.5
01C2:  BSF    09.2
01C3:  BCF    03.5
01C4:  BTFSC  09.2
01C5:  GOTO   237
....................    {
....................       delay_ms(20);
01C6:  MOVLW  14
01C7:  MOVWF  32
01C8:  CALL   055
....................       if(input(pin_e2)==0)
01C9:  BSF    03.5
01CA:  BSF    09.2
01CB:  BCF    03.5
01CC:  BTFSC  09.2
01CD:  GOTO   237
....................       {
....................          speed+=100;
01CE:  MOVLW  64
01CF:  ADDWF  27,F
01D0:  MOVLW  00
01D1:  BTFSC  03.0
01D2:  MOVLW  01
01D3:  ADDWF  28,F
01D4:  MOVLW  00
01D5:  BTFSC  03.0
01D6:  MOVLW  01
01D7:  ADDWF  29,F
01D8:  MOVLW  00
01D9:  BTFSC  03.0
01DA:  MOVLW  01
01DB:  ADDWF  2A,F
....................          if(speed>900) speed = 100;
01DC:  MOVF   2A,F
01DD:  BTFSS  03.2
01DE:  GOTO   1ED
01DF:  MOVF   29,F
01E0:  BTFSS  03.2
01E1:  GOTO   1ED
01E2:  MOVF   28,W
01E3:  SUBLW  02
01E4:  BTFSC  03.0
01E5:  GOTO   1F2
01E6:  XORLW  FF
01E7:  BTFSS  03.2
01E8:  GOTO   1ED
01E9:  MOVF   27,W
01EA:  SUBLW  84
01EB:  BTFSC  03.0
01EC:  GOTO   1F2
01ED:  CLRF   2A
01EE:  CLRF   29
01EF:  CLRF   28
01F0:  MOVLW  64
01F1:  MOVWF  27
....................          output_d(ma7doan[speed/100%10]);
01F2:  BCF    03.1
01F3:  MOVF   2A,W
01F4:  MOVWF  38
01F5:  MOVF   29,W
01F6:  MOVWF  37
01F7:  MOVF   28,W
01F8:  MOVWF  36
01F9:  MOVF   27,W
01FA:  MOVWF  35
01FB:  CLRF   3C
01FC:  CLRF   3B
01FD:  CLRF   3A
01FE:  MOVLW  64
01FF:  MOVWF  39
0200:  CALL   079
0201:  MOVF   7A,W
0202:  MOVWF  30
0203:  MOVF   79,W
0204:  MOVWF  2F
0205:  MOVF   78,W
0206:  MOVWF  2E
0207:  MOVF   77,W
0208:  MOVWF  2D
0209:  BSF    03.1
020A:  MOVLW  31
020B:  MOVWF  04
020C:  BCF    03.7
020D:  MOVF   7A,W
020E:  MOVWF  38
020F:  MOVF   79,W
0210:  MOVWF  37
0211:  MOVF   78,W
0212:  MOVWF  36
0213:  MOVF   77,W
0214:  MOVWF  35
0215:  CLRF   3C
0216:  CLRF   3B
0217:  CLRF   3A
0218:  MOVLW  0A
0219:  MOVWF  39
021A:  CALL   079
021B:  MOVF   34,W
021C:  MOVWF  30
021D:  MOVF   33,W
021E:  MOVWF  2F
021F:  MOVF   32,W
0220:  MOVWF  2E
0221:  MOVF   31,W
0222:  MOVWF  2D
0223:  MOVWF  77
0224:  MOVF   32,W
0225:  MOVWF  78
0226:  MOVF   33,W
0227:  MOVWF  79
0228:  MOVF   34,W
0229:  MOVWF  7A
022A:  MOVF   77,W
022B:  CALL   004
022C:  MOVWF  35
022D:  BSF    03.5
022E:  CLRF   08
022F:  BCF    03.5
0230:  MOVF   35,W
0231:  MOVWF  08
....................          while(input(pin_e2)==0);
0232:  BSF    03.5
0233:  BSF    09.2
0234:  BCF    03.5
0235:  BTFSS  09.2
0236:  GOTO   232
....................       }
....................    }
0237:  BCF    0A.3
0238:  BCF    0A.4
0239:  GOTO   3CE (RETURN)
.................... }
.................... void main()
*
034E:  MOVF   03,W
034F:  ANDLW  1F
0350:  MOVWF  03
0351:  MOVLW  71
0352:  BSF    03.5
0353:  MOVWF  0F
0354:  CLRF   10
0355:  MOVF   0F,W
0356:  MOVLW  FF
0357:  BCF    03.5
0358:  MOVWF  20
0359:  MOVLW  01
035A:  MOVWF  22
035B:  CLRF   2A
035C:  CLRF   29
035D:  CLRF   28
035E:  MOVLW  64
035F:  MOVWF  27
0360:  CLRF   2C
0361:  CLRF   2B
0362:  BSF    03.5
0363:  BSF    03.6
0364:  MOVF   09,W
0365:  ANDLW  C0
0366:  MOVWF  09
0367:  BCF    03.6
0368:  BCF    1F.4
0369:  BCF    1F.5
036A:  MOVLW  00
036B:  BSF    03.6
036C:  MOVWF  08
036D:  BCF    03.5
036E:  CLRF   07
036F:  CLRF   08
0370:  CLRF   09
0371:  BCF    03.7
.................... {
....................    set_tris_a(0);
0372:  MOVLW  00
0373:  BSF    03.5
0374:  BCF    03.6
0375:  MOVWF  05
....................    set_tris_c(0);
0376:  MOVWF  07
0377:  BCF    03.5
0378:  MOVWF  20
....................    set_tris_b(0);
0379:  BSF    03.5
037A:  MOVWF  06
....................    set_tris_d(0);
037B:  MOVWF  08
....................    set_tris_e(0xff);
037C:  BSF    09.0
037D:  BSF    09.1
037E:  BSF    09.2
037F:  BSF    09.3
....................    output_a(0);
0380:  CLRF   05
0381:  BCF    03.5
0382:  CLRF   05
....................    output_c(0);
0383:  MOVWF  20
0384:  BSF    03.5
0385:  CLRF   07
0386:  BCF    03.5
0387:  CLRF   07
....................    lcd_setup();
0388:  CALL   069
....................    lcd_command(0x80);
0389:  MOVLW  80
038A:  MOVWF  2D
038B:  CALL   033
.................... //!   lcd_data(0x7e);
.................... //!   lcd_command(0x80+1);
.................... //!   lcd_data("Sang Dan 12 LED");
.................... //!   lcd_command(0xc0+1);
.................... //!   lcd_data("Tat Dan 12 LED");
.................... //!   lcd_command(0x94+1);
.................... //!   lcd_data("Sang Dich 12 LED");
.................... //!   lcd_command(0xd4+1);
.................... //!   lcd_data("Tat Dich 12 LED");
....................    output_d(ma7doan[speed/100%10]);
038C:  BCF    03.1
038D:  MOVF   2A,W
038E:  MOVWF  38
038F:  MOVF   29,W
0390:  MOVWF  37
0391:  MOVF   28,W
0392:  MOVWF  36
0393:  MOVF   27,W
0394:  MOVWF  35
0395:  CLRF   3C
0396:  CLRF   3B
0397:  CLRF   3A
0398:  MOVLW  64
0399:  MOVWF  39
039A:  CALL   079
039B:  MOVF   7A,W
039C:  MOVWF  30
039D:  MOVF   79,W
039E:  MOVWF  2F
039F:  MOVF   78,W
03A0:  MOVWF  2E
03A1:  MOVF   77,W
03A2:  MOVWF  2D
03A3:  BSF    03.1
03A4:  MOVLW  31
03A5:  MOVWF  04
03A6:  BCF    03.7
03A7:  MOVF   7A,W
03A8:  MOVWF  38
03A9:  MOVF   79,W
03AA:  MOVWF  37
03AB:  MOVF   78,W
03AC:  MOVWF  36
03AD:  MOVF   77,W
03AE:  MOVWF  35
03AF:  CLRF   3C
03B0:  CLRF   3B
03B1:  CLRF   3A
03B2:  MOVLW  0A
03B3:  MOVWF  39
03B4:  CALL   079
03B5:  MOVF   34,W
03B6:  MOVWF  30
03B7:  MOVF   33,W
03B8:  MOVWF  2F
03B9:  MOVF   32,W
03BA:  MOVWF  2E
03BB:  MOVF   31,W
03BC:  MOVWF  2D
03BD:  MOVWF  77
03BE:  MOVF   32,W
03BF:  MOVWF  78
03C0:  MOVF   33,W
03C1:  MOVWF  79
03C2:  MOVF   34,W
03C3:  MOVWF  7A
03C4:  MOVF   77,W
03C5:  CALL   004
03C6:  MOVWF  35
03C7:  BSF    03.5
03C8:  CLRF   08
03C9:  BCF    03.5
03CA:  MOVF   35,W
03CB:  MOVWF  08
....................    while(true)
....................    {
....................       hienthi();
03CC:  CALL   140
....................       nutnhan();
03CD:  GOTO   190
....................       if(tt == 1) sangdan(1000-speed);
03CE:  DECFSZ 22,W
03CF:  GOTO   3DE
03D0:  MOVF   27,W
03D1:  SUBLW  E8
03D2:  MOVWF  2D
03D3:  MOVLW  03
03D4:  MOVWF  2E
03D5:  MOVF   28,W
03D6:  BTFSS  03.0
03D7:  INCFSZ 28,W
03D8:  SUBWF  2E,F
03D9:  MOVF   2E,W
03DA:  MOVWF  30
03DB:  MOVF   2D,W
03DC:  MOVWF  2F
03DD:  GOTO   23A
....................       if(tt == 2) tatdan(1000-speed);
03DE:  MOVF   22,W
03DF:  SUBLW  02
03E0:  BTFSS  03.2
03E1:  GOTO   3F0
03E2:  MOVF   27,W
03E3:  SUBLW  E8
03E4:  MOVWF  2D
03E5:  MOVLW  03
03E6:  MOVWF  2E
03E7:  MOVF   28,W
03E8:  BTFSS  03.0
03E9:  INCFSZ 28,W
03EA:  SUBWF  2E,F
03EB:  MOVF   2E,W
03EC:  MOVWF  30
03ED:  MOVF   2D,W
03EE:  MOVWF  2F
03EF:  GOTO   27D
....................       if(tt == 3) sangdich(1000-speed);
03F0:  MOVF   22,W
03F1:  SUBLW  03
03F2:  BTFSS  03.2
03F3:  GOTO   402
03F4:  MOVF   27,W
03F5:  SUBLW  E8
03F6:  MOVWF  2D
03F7:  MOVLW  03
03F8:  MOVWF  2E
03F9:  MOVF   28,W
03FA:  BTFSS  03.0
03FB:  INCFSZ 28,W
03FC:  SUBWF  2E,F
03FD:  MOVF   2E,W
03FE:  MOVWF  30
03FF:  MOVF   2D,W
0400:  MOVWF  2F
0401:  GOTO   2C5
....................       if(tt == 4) tatdich(1000-speed);
0402:  MOVF   22,W
0403:  SUBLW  04
0404:  BTFSS  03.2
0405:  GOTO   414
0406:  MOVF   27,W
0407:  SUBLW  E8
0408:  MOVWF  2D
0409:  MOVLW  03
040A:  MOVWF  2E
040B:  MOVF   28,W
040C:  BTFSS  03.0
040D:  INCFSZ 28,W
040E:  SUBWF  2E,F
040F:  MOVF   2E,W
0410:  MOVWF  30
0411:  MOVF   2D,W
0412:  MOVWF  2F
0413:  GOTO   307
0414:  GOTO   3CC
....................    }
.................... }
0415:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
