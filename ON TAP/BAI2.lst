CCS PCM C Compiler, Version 5.112, 43599               24-Oct-23 14:36

               Filename:   C:\Users\defaultuser0.LAPTOP-POTNR7PE\OneDrive - hcmute.edu.vn\Desktop\VXL\ON TAP\BAI2.lst

               ROM used:   1479 words (18%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           45 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   560
0003:  NOP
.................... #include<16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  EF
0009:  RETLW  DF
000A:  RETLW  BF
000B:  RETLW  7F
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  C0
0011:  RETLW  F9
0012:  RETLW  A4
0013:  RETLW  B0
0014:  RETLW  99
0015:  RETLW  92
0016:  RETLW  82
0017:  RETLW  F8
0018:  RETLW  80
0019:  RETLW  90
001A:  DATA C7,24
001B:  DATA CF,24
001C:  DATA 20,24
001D:  DATA 41,27
001E:  DATA 3A,10
001F:  DATA 25,18
0020:  DATA B2,3A
0021:  DATA 00,00
0022:  DATA D3,20
0023:  DATA 4E,10
0024:  DATA 50,24
0025:  DATA C1,26
0026:  DATA 3A,10
0027:  DATA 25,18
0028:  DATA B2,3A
0029:  DATA A0,21
002A:  DATA C1,24
002B:  DATA 00,00
002C:  DATA CE,20
002D:  DATA CE,23
002E:  DATA A0,29
002F:  DATA D5,20
0030:  DATA 54,1D
0031:  DATA A0,12
0032:  DATA 30,19
0033:  DATA EC,3A
0034:  DATA A0,21
0035:  DATA C1,24
0036:  DATA 80,01
0037:  DATA C7,24
0038:  DATA CF,24
0039:  DATA 20,24
003A:  DATA 41,27
003B:  DATA 3A,10
003C:  DATA 25,18
003D:  DATA B2,3A
003E:  DATA 00,00
*
01C0:  MOVF   0B,W
01C1:  MOVWF  31
01C2:  BCF    0B.7
01C3:  BSF    03.5
01C4:  BSF    03.6
01C5:  BSF    0C.7
01C6:  BSF    0C.0
01C7:  NOP
01C8:  NOP
01C9:  BCF    03.5
01CA:  BCF    03.6
01CB:  BTFSC  31.7
01CC:  BSF    0B.7
01CD:  BTFSC  03.0
01CE:  GOTO   1F7
01CF:  BSF    03.6
01D0:  MOVF   0C,W
01D1:  ANDLW  7F
01D2:  BCF    03.6
01D3:  MOVWF  31
01D4:  BSF    03.6
01D5:  MOVF   0D,W
01D6:  BCF    03.6
01D7:  MOVWF  32
01D8:  BSF    03.6
01D9:  MOVF   0F,W
01DA:  BCF    03.6
01DB:  MOVWF  33
01DC:  MOVF   31,W
01DD:  MOVWF  3B
01DE:  CALL   194
01DF:  MOVF   32,W
01E0:  BSF    03.6
01E1:  MOVWF  0D
01E2:  BCF    03.6
01E3:  MOVF   33,W
01E4:  BSF    03.6
01E5:  MOVWF  0F
01E6:  BCF    03.6
01E7:  MOVF   0B,W
01E8:  MOVWF  34
01E9:  BCF    0B.7
01EA:  BSF    03.5
01EB:  BSF    03.6
01EC:  BSF    0C.7
01ED:  BSF    0C.0
01EE:  NOP
01EF:  NOP
01F0:  BCF    03.5
01F1:  BCF    03.6
01F2:  BTFSC  34.7
01F3:  BSF    0B.7
01F4:  DECFSZ 30,F
01F5:  GOTO   1F7
01F6:  GOTO   216
01F7:  BSF    03.6
01F8:  RLF    0C,W
01F9:  RLF    0E,W
01FA:  ANDLW  7F
01FB:  BCF    03.6
01FC:  MOVWF  31
01FD:  BSF    03.6
01FE:  MOVF   0D,W
01FF:  BCF    03.6
0200:  MOVWF  32
0201:  BSF    03.6
0202:  MOVF   0F,W
0203:  BCF    03.6
0204:  MOVWF  33
0205:  MOVF   31,W
0206:  MOVWF  3B
0207:  CALL   194
0208:  MOVF   32,W
0209:  BSF    03.6
020A:  MOVWF  0D
020B:  BCF    03.6
020C:  MOVF   33,W
020D:  BSF    03.6
020E:  MOVWF  0F
020F:  INCF   0D,F
0210:  BTFSC  03.2
0211:  INCF   0F,F
0212:  BCF    03.0
0213:  BCF    03.6
0214:  DECFSZ 30,F
0215:  GOTO   1C0
0216:  RETURN
0217:  MOVF   33,W
0218:  CLRF   78
0219:  SUBWF  32,W
021A:  BTFSC  03.0
021B:  GOTO   21F
021C:  MOVF   32,W
021D:  MOVWF  77
021E:  GOTO   22B
021F:  CLRF   77
0220:  MOVLW  08
0221:  MOVWF  34
0222:  RLF    32,F
0223:  RLF    77,F
0224:  MOVF   33,W
0225:  SUBWF  77,W
0226:  BTFSC  03.0
0227:  MOVWF  77
0228:  RLF    78,F
0229:  DECFSZ 34,F
022A:  GOTO   222
022B:  RETURN
022C:  MOVF   78,W
022D:  MOVF   30,W
022E:  MOVWF  32
022F:  MOVLW  64
0230:  MOVWF  33
0231:  CALL   217
0232:  MOVF   77,W
0233:  MOVWF  30
0234:  MOVF   78,W
0235:  MOVLW  30
0236:  BTFSS  03.2
0237:  GOTO   23F
0238:  BTFSS  31.1
0239:  GOTO   246
023A:  BTFSC  31.3
023B:  GOTO   246
023C:  BTFSC  31.4
023D:  MOVLW  20
023E:  GOTO   242
023F:  BCF    31.3
0240:  BCF    31.4
0241:  BSF    31.0
0242:  ADDWF  78,F
0243:  MOVF   78,W
0244:  MOVWF  3B
0245:  CALL   194
0246:  MOVF   30,W
0247:  MOVWF  32
0248:  MOVLW  0A
0249:  MOVWF  33
024A:  CALL   217
024B:  MOVF   77,W
024C:  MOVWF  30
024D:  MOVF   78,W
024E:  MOVLW  30
024F:  BTFSS  03.2
0250:  GOTO   257
0251:  BTFSC  31.3
0252:  GOTO   25B
0253:  BTFSS  31.0
0254:  GOTO   25B
0255:  BTFSC  31.4
0256:  MOVLW  20
0257:  ADDWF  78,F
0258:  MOVF   78,W
0259:  MOVWF  3B
025A:  CALL   194
025B:  MOVLW  30
025C:  ADDWF  30,F
025D:  MOVF   30,W
025E:  MOVWF  3B
025F:  CALL   194
0260:  RETURN
*
03CE:  CLRF   77
03CF:  CLRF   78
03D0:  MOVF   2F,W
03D1:  BCF    03.0
03D2:  BTFSC  30.0
03D3:  ADDWF  77,F
03D4:  RRF    77,F
03D5:  RRF    78,F
03D6:  BTFSC  30.1
03D7:  ADDWF  77,F
03D8:  RRF    77,F
03D9:  RRF    78,F
03DA:  BTFSC  30.2
03DB:  ADDWF  77,F
03DC:  RRF    77,F
03DD:  RRF    78,F
03DE:  BTFSC  30.3
03DF:  ADDWF  77,F
03E0:  RRF    77,F
03E1:  RRF    78,F
03E2:  BTFSC  30.4
03E3:  ADDWF  77,F
03E4:  RRF    77,F
03E5:  RRF    78,F
03E6:  BTFSC  30.5
03E7:  ADDWF  77,F
03E8:  RRF    77,F
03E9:  RRF    78,F
03EA:  BTFSC  30.6
03EB:  ADDWF  77,F
03EC:  RRF    77,F
03ED:  RRF    78,F
03EE:  BTFSC  30.7
03EF:  ADDWF  77,F
03F0:  RRF    77,F
03F1:  RRF    78,F
03F2:  RETURN
*
0472:  BTFSC  03.1
0473:  GOTO   477
0474:  MOVLW  43
0475:  MOVWF  04
0476:  BCF    03.7
0477:  CLRF   77
0478:  CLRF   78
0479:  CLRF   79
047A:  CLRF   7A
047B:  CLRF   43
047C:  CLRF   44
047D:  CLRF   45
047E:  CLRF   46
047F:  MOVF   42,W
0480:  IORWF  41,W
0481:  IORWF  40,W
0482:  IORWF  3F,W
0483:  BTFSC  03.2
0484:  GOTO   4B5
0485:  MOVLW  20
0486:  MOVWF  47
0487:  BCF    03.0
0488:  RLF    3B,F
0489:  RLF    3C,F
048A:  RLF    3D,F
048B:  RLF    3E,F
048C:  RLF    43,F
048D:  RLF    44,F
048E:  RLF    45,F
048F:  RLF    46,F
0490:  MOVF   42,W
0491:  SUBWF  46,W
0492:  BTFSS  03.2
0493:  GOTO   49E
0494:  MOVF   41,W
0495:  SUBWF  45,W
0496:  BTFSS  03.2
0497:  GOTO   49E
0498:  MOVF   40,W
0499:  SUBWF  44,W
049A:  BTFSS  03.2
049B:  GOTO   49E
049C:  MOVF   3F,W
049D:  SUBWF  43,W
049E:  BTFSS  03.0
049F:  GOTO   4AF
04A0:  MOVF   3F,W
04A1:  SUBWF  43,F
04A2:  MOVF   40,W
04A3:  BTFSS  03.0
04A4:  INCFSZ 40,W
04A5:  SUBWF  44,F
04A6:  MOVF   41,W
04A7:  BTFSS  03.0
04A8:  INCFSZ 41,W
04A9:  SUBWF  45,F
04AA:  MOVF   42,W
04AB:  BTFSS  03.0
04AC:  INCFSZ 42,W
04AD:  SUBWF  46,F
04AE:  BSF    03.0
04AF:  RLF    77,F
04B0:  RLF    78,F
04B1:  RLF    79,F
04B2:  RLF    7A,F
04B3:  DECFSZ 47,F
04B4:  GOTO   487
04B5:  MOVF   43,W
04B6:  MOVWF  00
04B7:  INCF   04,F
04B8:  MOVF   44,W
04B9:  MOVWF  00
04BA:  INCF   04,F
04BB:  MOVF   45,W
04BC:  MOVWF  00
04BD:  INCF   04,F
04BE:  MOVF   46,W
04BF:  MOVWF  00
04C0:  RETURN
*
04FD:  MOVF   04,W
04FE:  MOVWF  33
04FF:  MOVLW  3B
0500:  MOVWF  3A
0501:  MOVLW  9A
0502:  MOVWF  39
0503:  MOVLW  CA
0504:  MOVWF  38
0505:  CLRF   37
0506:  MOVLW  0A
0507:  MOVWF  35
0508:  BSF    03.1
0509:  MOVLW  2F
050A:  MOVWF  04
050B:  BCF    03.7
050C:  MOVF   32,W
050D:  MOVWF  3E
050E:  MOVF   31,W
050F:  MOVWF  3D
0510:  MOVF   30,W
0511:  MOVWF  3C
0512:  MOVF   2F,W
0513:  MOVWF  3B
0514:  MOVF   3A,W
0515:  MOVWF  42
0516:  MOVF   39,W
0517:  MOVWF  41
0518:  MOVF   38,W
0519:  MOVWF  40
051A:  MOVF   37,W
051B:  MOVWF  3F
051C:  CALL   472
051D:  MOVF   78,W
051E:  MOVF   77,F
051F:  BTFSS  03.2
0520:  GOTO   534
0521:  MOVF   35,W
0522:  XORLW  01
0523:  BTFSC  03.2
0524:  GOTO   534
0525:  MOVF   33,W
0526:  BTFSC  03.2
0527:  GOTO   535
0528:  ANDLW  0F
0529:  SUBWF  35,W
052A:  BTFSC  03.2
052B:  GOTO   52E
052C:  BTFSC  03.0
052D:  GOTO   53A
052E:  BTFSC  33.7
052F:  GOTO   53A
0530:  BTFSC  33.6
0531:  GOTO   535
0532:  MOVLW  20
0533:  GOTO   536
0534:  CLRF   33
0535:  MOVLW  30
0536:  ADDWF  77,F
0537:  MOVF   77,W
0538:  MOVWF  3B
0539:  CALL   194
053A:  BCF    03.1
053B:  MOVF   3A,W
053C:  MOVWF  3E
053D:  MOVF   39,W
053E:  MOVWF  3D
053F:  MOVF   38,W
0540:  MOVWF  3C
0541:  MOVF   37,W
0542:  MOVWF  3B
0543:  CLRF   42
0544:  CLRF   41
0545:  CLRF   40
0546:  MOVLW  0A
0547:  MOVWF  3F
0548:  CALL   472
0549:  MOVF   7A,W
054A:  MOVWF  3A
054B:  MOVF   79,W
054C:  MOVWF  39
054D:  MOVF   78,W
054E:  MOVWF  38
054F:  MOVF   77,W
0550:  MOVWF  37
0551:  DECFSZ 35,F
0552:  GOTO   508
.................... 
.................... #list
.................... 
.................... #fuses intrc_io
.................... #use delay(clock=8M)
*
003F:  MOVLW  3C
0040:  MOVWF  04
0041:  BCF    03.7
0042:  MOVF   00,W
0043:  BTFSC  03.2
0044:  GOTO   052
0045:  MOVLW  02
0046:  MOVWF  78
0047:  CLRF   77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  DECFSZ 78,F
004B:  GOTO   047
004C:  MOVLW  97
004D:  MOVWF  77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 00,F
0051:  GOTO   045
0052:  RETURN
.................... 
.................... #define LCD_ENABLE_PIN  PIN_E2                                    
.................... #define LCD_RS_PIN      PIN_E0                                 
.................... #define LCD_RW_PIN      PIN_E1                                  
.................... #define LCD_DATA4       PIN_C4                                 
.................... #define LCD_DATA5       PIN_c5                                   
.................... #define LCD_DATA6       PIN_c6                                    
.................... #define LCD_DATA7       PIN_c7
.................... #include<tvkey4x4.c>
.................... unsigned int8 key_4x4()
*
033F:  MOVLW  FF
0340:  MOVWF  2F
.................... {
....................       const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................       unsigned int8 mp=0xff,cot;
....................       for(cot=0;cot<4;cot++)
0341:  CLRF   30
0342:  MOVF   30,W
0343:  SUBLW  03
0344:  BTFSS  03.0
0345:  GOTO   385
....................       {
....................             output_b(mq[cot]);
0346:  MOVF   30,W
0347:  CALL   004
0348:  MOVWF  31
0349:  BSF    03.5
034A:  CLRF   06
034B:  BCF    03.5
034C:  MOVF   31,W
034D:  MOVWF  06
....................             while(input(pin_b0)==0) mp= cot*4 + 0;
034E:  BSF    03.5
034F:  BSF    06.0
0350:  BCF    03.5
0351:  BTFSC  06.0
0352:  GOTO   359
0353:  RLF    30,W
0354:  MOVWF  2F
0355:  RLF    2F,F
0356:  MOVLW  FC
0357:  ANDWF  2F,F
0358:  GOTO   34E
....................             while(input(pin_b1)==0) mp= cot*4 + 1;
0359:  BSF    03.5
035A:  BSF    06.1
035B:  BCF    03.5
035C:  BTFSC  06.1
035D:  GOTO   367
035E:  RLF    30,W
035F:  MOVWF  77
0360:  RLF    77,F
0361:  MOVLW  FC
0362:  ANDWF  77,F
0363:  MOVF   77,W
0364:  ADDLW  01
0365:  MOVWF  2F
0366:  GOTO   359
....................             while(input(pin_b2)==0) mp= cot*4 + 2;
0367:  BSF    03.5
0368:  BSF    06.2
0369:  BCF    03.5
036A:  BTFSC  06.2
036B:  GOTO   375
036C:  RLF    30,W
036D:  MOVWF  77
036E:  RLF    77,F
036F:  MOVLW  FC
0370:  ANDWF  77,F
0371:  MOVF   77,W
0372:  ADDLW  02
0373:  MOVWF  2F
0374:  GOTO   367
....................             while(input(pin_b3)==0) mp= cot*4 + 3;
0375:  BSF    03.5
0376:  BSF    06.3
0377:  BCF    03.5
0378:  BTFSC  06.3
0379:  GOTO   383
037A:  RLF    30,W
037B:  MOVWF  77
037C:  RLF    77,F
037D:  MOVLW  FC
037E:  ANDWF  77,F
037F:  MOVF   77,W
0380:  ADDLW  03
0381:  MOVWF  2F
0382:  GOTO   375
0383:  INCF   30,F
0384:  GOTO   342
....................       }
....................       return mp;
0385:  MOVF   2F,W
0386:  MOVWF  78
.................... }
.................... 
.................... #include<LCD.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00C8:  BSF    07.4
....................    output_float(LCD_DATA5);
00C9:  BSF    07.5
....................    output_float(LCD_DATA6);
00CA:  BSF    07.6
....................    output_float(LCD_DATA7);
00CB:  BSF    07.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00CC:  BCF    03.5
00CD:  BSF    09.1
00CE:  BSF    03.5
00CF:  BCF    09.1
....................    delay_cycles(1);
00D0:  NOP
....................    lcd_output_enable(1);
00D1:  BCF    03.5
00D2:  BSF    09.2
00D3:  BSF    03.5
00D4:  BCF    09.2
....................    delay_cycles(1);
00D5:  NOP
....................    high = lcd_read_nibble();
00D6:  BCF    03.5
00D7:  CALL   087
00D8:  MOVF   78,W
00D9:  MOVWF  43
....................       
....................    lcd_output_enable(0);
00DA:  BCF    09.2
00DB:  BSF    03.5
00DC:  BCF    09.2
....................    delay_cycles(1);
00DD:  NOP
....................    lcd_output_enable(1);
00DE:  BCF    03.5
00DF:  BSF    09.2
00E0:  BSF    03.5
00E1:  BCF    09.2
....................    delay_us(1);
00E2:  GOTO   0E3
....................    low = lcd_read_nibble();
00E3:  BCF    03.5
00E4:  CALL   087
00E5:  MOVF   78,W
00E6:  MOVWF  42
....................       
....................    lcd_output_enable(0);
00E7:  BCF    09.2
00E8:  BSF    03.5
00E9:  BCF    09.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00EA:  BCF    03.5
00EB:  BCF    20.4
00EC:  MOVF   20,W
00ED:  BSF    03.5
00EE:  MOVWF  07
....................    output_drive(LCD_DATA5);
00EF:  BCF    03.5
00F0:  BCF    20.5
00F1:  MOVF   20,W
00F2:  BSF    03.5
00F3:  MOVWF  07
....................    output_drive(LCD_DATA6);
00F4:  BCF    03.5
00F5:  BCF    20.6
00F6:  MOVF   20,W
00F7:  BSF    03.5
00F8:  MOVWF  07
....................    output_drive(LCD_DATA7);
00F9:  BCF    03.5
00FA:  BCF    20.7
00FB:  MOVF   20,W
00FC:  BSF    03.5
00FD:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00FE:  BCF    03.5
00FF:  SWAPF  43,W
0100:  MOVWF  77
0101:  MOVLW  F0
0102:  ANDWF  77,F
0103:  MOVF   77,W
0104:  IORWF  42,W
0105:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0087:  CLRF   44
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0088:  BSF    20.4
0089:  MOVF   20,W
008A:  BSF    03.5
008B:  MOVWF  07
008C:  MOVLW  00
008D:  BCF    03.5
008E:  BTFSC  07.4
008F:  MOVLW  01
0090:  IORWF  44,F
....................    n |= input(LCD_DATA5) << 1;
0091:  BSF    20.5
0092:  MOVF   20,W
0093:  BSF    03.5
0094:  MOVWF  07
0095:  MOVLW  00
0096:  BCF    03.5
0097:  BTFSC  07.5
0098:  MOVLW  01
0099:  MOVWF  77
009A:  BCF    03.0
009B:  RLF    77,F
009C:  MOVF   77,W
009D:  IORWF  44,F
....................    n |= input(LCD_DATA6) << 2;
009E:  BSF    20.6
009F:  MOVF   20,W
00A0:  BSF    03.5
00A1:  MOVWF  07
00A2:  MOVLW  00
00A3:  BCF    03.5
00A4:  BTFSC  07.6
00A5:  MOVLW  01
00A6:  MOVWF  77
00A7:  RLF    77,F
00A8:  RLF    77,F
00A9:  MOVLW  FC
00AA:  ANDWF  77,F
00AB:  MOVF   77,W
00AC:  IORWF  44,F
....................    n |= input(LCD_DATA7) << 3;
00AD:  BSF    20.7
00AE:  MOVF   20,W
00AF:  BSF    03.5
00B0:  MOVWF  07
00B1:  MOVLW  00
00B2:  BCF    03.5
00B3:  BTFSC  07.7
00B4:  MOVLW  01
00B5:  MOVWF  77
00B6:  RLF    77,F
00B7:  RLF    77,F
00B8:  RLF    77,F
00B9:  MOVLW  F8
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  44,F
....................    
....................    return(n);
00BD:  MOVF   44,W
00BE:  MOVWF  78
....................   #else
00BF:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0053:  BTFSC  43.0
0054:  GOTO   057
0055:  BCF    07.4
0056:  GOTO   058
0057:  BSF    07.4
0058:  BCF    20.4
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
....................    output_bit(LCD_DATA5, bit_test(n, 1));
005C:  BCF    03.5
005D:  BTFSC  43.1
005E:  GOTO   061
005F:  BCF    07.5
0060:  GOTO   062
0061:  BSF    07.5
0062:  BCF    20.5
0063:  MOVF   20,W
0064:  BSF    03.5
0065:  MOVWF  07
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0066:  BCF    03.5
0067:  BTFSC  43.2
0068:  GOTO   06B
0069:  BCF    07.6
006A:  GOTO   06C
006B:  BSF    07.6
006C:  BCF    20.6
006D:  MOVF   20,W
006E:  BSF    03.5
006F:  MOVWF  07
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0070:  BCF    03.5
0071:  BTFSC  43.3
0072:  GOTO   075
0073:  BCF    07.7
0074:  GOTO   076
0075:  BSF    07.7
0076:  BCF    20.7
0077:  MOVF   20,W
0078:  BSF    03.5
0079:  MOVWF  07
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
007A:  NOP
....................    lcd_output_enable(1);
007B:  BCF    03.5
007C:  BSF    09.2
007D:  BSF    03.5
007E:  BCF    09.2
....................    delay_us(2);
007F:  GOTO   080
0080:  GOTO   081
....................    lcd_output_enable(0);
0081:  BCF    03.5
0082:  BCF    09.2
0083:  BSF    03.5
0084:  BCF    09.2
0085:  BCF    03.5
0086:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
00C0:  BSF    03.5
00C1:  BCF    09.2
....................    lcd_rs_tris();
00C2:  BCF    09.0
....................    lcd_rw_tris();
00C3:  BCF    09.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
00C4:  BCF    03.5
00C5:  BCF    09.0
00C6:  BSF    03.5
00C7:  BCF    09.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0106:  MOVF   78,W
0107:  MOVWF  42
0108:  BTFSS  42.7
0109:  GOTO   10C
010A:  BSF    03.5
010B:  GOTO   0C8
....................    lcd_output_rs(address);
010C:  MOVF   40,F
010D:  BTFSS  03.2
010E:  GOTO   111
010F:  BCF    09.0
0110:  GOTO   112
0111:  BSF    09.0
0112:  BSF    03.5
0113:  BCF    09.0
....................    delay_cycles(1);
0114:  NOP
....................    lcd_output_rw(0);
0115:  BCF    03.5
0116:  BCF    09.1
0117:  BSF    03.5
0118:  BCF    09.1
....................    delay_cycles(1);
0119:  NOP
....................    lcd_output_enable(0);
011A:  BCF    03.5
011B:  BCF    09.2
011C:  BSF    03.5
011D:  BCF    09.2
....................    lcd_send_nibble(n >> 4);
011E:  BCF    03.5
011F:  SWAPF  41,W
0120:  MOVWF  42
0121:  MOVLW  0F
0122:  ANDWF  42,F
0123:  MOVF   42,W
0124:  MOVWF  43
0125:  CALL   053
....................    lcd_send_nibble(n & 0xf);
0126:  MOVF   41,W
0127:  ANDLW  0F
0128:  MOVWF  42
0129:  MOVWF  43
012A:  CALL   053
012B:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
012C:  MOVLW  28
012D:  MOVWF  30
012E:  MOVLW  0C
012F:  MOVWF  31
0130:  MOVLW  01
0131:  MOVWF  32
0132:  MOVLW  06
0133:  MOVWF  33
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0134:  BCF    09.2
0135:  BSF    03.5
0136:  BCF    09.2
....................    lcd_output_rs(0);
0137:  BCF    03.5
0138:  BCF    09.0
0139:  BSF    03.5
013A:  BCF    09.0
....................    lcd_output_rw(0);
013B:  BCF    03.5
013C:  BCF    09.1
013D:  BSF    03.5
013E:  BCF    09.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
013F:  BCF    03.5
0140:  BCF    20.4
0141:  MOVF   20,W
0142:  BSF    03.5
0143:  MOVWF  07
....................    output_drive(LCD_DATA5);
0144:  BCF    03.5
0145:  BCF    20.5
0146:  MOVF   20,W
0147:  BSF    03.5
0148:  MOVWF  07
....................    output_drive(LCD_DATA6);
0149:  BCF    03.5
014A:  BCF    20.6
014B:  MOVF   20,W
014C:  BSF    03.5
014D:  MOVWF  07
....................    output_drive(LCD_DATA7);
014E:  BCF    03.5
014F:  BCF    20.7
0150:  MOVF   20,W
0151:  BSF    03.5
0152:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0153:  BCF    09.2
....................    lcd_rs_tris();
0154:  BCF    09.0
....................    lcd_rw_tris();
0155:  BCF    09.1
....................  #endif
....................     
....................    delay_ms(15);
0156:  MOVLW  0F
0157:  BCF    03.5
0158:  MOVWF  3C
0159:  CALL   03F
....................    for(i=1;i<=3;++i)
015A:  MOVLW  01
015B:  MOVWF  2F
015C:  MOVF   2F,W
015D:  SUBLW  03
015E:  BTFSS  03.0
015F:  GOTO   168
....................    {
....................        lcd_send_nibble(3);
0160:  MOVLW  03
0161:  MOVWF  43
0162:  CALL   053
....................        delay_ms(5);
0163:  MOVLW  05
0164:  MOVWF  3C
0165:  CALL   03F
0166:  INCF   2F,F
0167:  GOTO   15C
....................    }
....................    
....................    lcd_send_nibble(2);
0168:  MOVLW  02
0169:  MOVWF  43
016A:  CALL   053
....................    delay_ms(5);
016B:  MOVLW  05
016C:  MOVWF  3C
016D:  CALL   03F
....................    for(i=0;i<=3;++i)
016E:  CLRF   2F
016F:  MOVF   2F,W
0170:  SUBLW  03
0171:  BTFSS  03.0
0172:  GOTO   17F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0173:  MOVLW  30
0174:  ADDWF  2F,W
0175:  MOVWF  04
0176:  BCF    03.7
0177:  MOVF   00,W
0178:  MOVWF  34
0179:  CLRF   40
017A:  MOVF   34,W
017B:  MOVWF  41
017C:  CALL   0C0
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
017D:  INCF   2F,F
017E:  GOTO   16F
017F:  BCF    0A.3
0180:  BCF    0A.4
0181:  GOTO   5AA (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0182:  DECFSZ 3D,W
0183:  GOTO   185
0184:  GOTO   188
....................       address=LCD_LINE_TWO;
0185:  MOVLW  40
0186:  MOVWF  3E
0187:  GOTO   189
....................    else
....................       address=0;
0188:  CLRF   3E
....................      
....................    address+=x-1;
0189:  MOVLW  01
018A:  SUBWF  3C,W
018B:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address);
018C:  MOVF   3E,W
018D:  IORLW  80
018E:  MOVWF  3F
018F:  CLRF   40
0190:  MOVF   3F,W
0191:  MOVWF  41
0192:  CALL   0C0
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0193:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0194:  MOVF   3B,W
0195:  XORLW  07
0196:  BTFSC  03.2
0197:  GOTO   1A2
0198:  XORLW  0B
0199:  BTFSC  03.2
019A:  GOTO   1A7
019B:  XORLW  06
019C:  BTFSC  03.2
019D:  GOTO   1AF
019E:  XORLW  02
019F:  BTFSC  03.2
01A0:  GOTO   1B5
01A1:  GOTO   1BA
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01A2:  MOVLW  01
01A3:  MOVWF  3C
01A4:  MOVWF  3D
01A5:  CALL   182
01A6:  GOTO   1BF
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01A7:  CLRF   40
01A8:  MOVLW  01
01A9:  MOVWF  41
01AA:  CALL   0C0
....................                      delay_ms(2);
01AB:  MOVLW  02
01AC:  MOVWF  3C
01AD:  CALL   03F
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01AE:  GOTO   1BF
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01AF:  MOVLW  01
01B0:  MOVWF  3C
01B1:  MOVLW  02
01B2:  MOVWF  3D
01B3:  CALL   182
01B4:  GOTO   1BF
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
01B5:  CLRF   40
01B6:  MOVLW  10
01B7:  MOVWF  41
01B8:  CALL   0C0
01B9:  GOTO   1BF
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
01BA:  MOVLW  01
01BB:  MOVWF  40
01BC:  MOVF   3B,W
01BD:  MOVWF  41
01BE:  CALL   0C0
....................      #endif
....................    }
01BF:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #bit t0if=0x0b.2
.................... const unsigned int8 ma7doan[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
.................... unsigned int8 kq=0, ttdem =1, gio=0,phut=0,giay=0;
.................... unsigned int8 mp,dem,flag=0,gioihan=20,bdn=0;
.................... unsigned int32 ns=0;
.................... void matranphim()
.................... {
....................    mp=key_4x4();
*
0387:  MOVF   78,W
0388:  MOVWF  26
....................    if(mp==0){
0389:  MOVF   26,F
038A:  BTFSS  03.2
038B:  GOTO   38E
....................       dem = 0;
038C:  CLRF   27
....................       flag++;
038D:  INCF   28,F
....................    }
....................    if(mp==1){
038E:  DECFSZ 26,W
038F:  GOTO   393
....................       dem = 1;
0390:  MOVLW  01
0391:  MOVWF  27
....................       flag++;
0392:  INCF   28,F
....................    }
....................    if(mp==2){
0393:  MOVF   26,W
0394:  SUBLW  02
0395:  BTFSS  03.2
0396:  GOTO   39A
....................       dem = 2;
0397:  MOVLW  02
0398:  MOVWF  27
....................       flag++;
0399:  INCF   28,F
....................    }
....................    if(mp==3){
039A:  MOVF   26,W
039B:  SUBLW  03
039C:  BTFSS  03.2
039D:  GOTO   3A1
....................       dem = 3;
039E:  MOVLW  03
039F:  MOVWF  27
....................       flag++;
03A0:  INCF   28,F
....................    }
....................    if(mp==4){
03A1:  MOVF   26,W
03A2:  SUBLW  04
03A3:  BTFSS  03.2
03A4:  GOTO   3A8
....................       dem = 4;
03A5:  MOVLW  04
03A6:  MOVWF  27
....................       flag++;
03A7:  INCF   28,F
....................    }
....................    if(mp==5){
03A8:  MOVF   26,W
03A9:  SUBLW  05
03AA:  BTFSS  03.2
03AB:  GOTO   3AF
....................       dem = 5;
03AC:  MOVLW  05
03AD:  MOVWF  27
....................       flag++;
03AE:  INCF   28,F
....................    }
....................    if(mp==6){
03AF:  MOVF   26,W
03B0:  SUBLW  06
03B1:  BTFSS  03.2
03B2:  GOTO   3B6
....................       dem = 6;
03B3:  MOVLW  06
03B4:  MOVWF  27
....................       flag++;
03B5:  INCF   28,F
....................    }
....................    if(mp==7){
03B6:  MOVF   26,W
03B7:  SUBLW  07
03B8:  BTFSS  03.2
03B9:  GOTO   3BD
....................       dem = 7;
03BA:  MOVLW  07
03BB:  MOVWF  27
....................       flag++;
03BC:  INCF   28,F
....................    }
....................    if(mp==8){
03BD:  MOVF   26,W
03BE:  SUBLW  08
03BF:  BTFSS  03.2
03C0:  GOTO   3C4
....................       dem = 8;
03C1:  MOVLW  08
03C2:  MOVWF  27
....................       flag++;
03C3:  INCF   28,F
....................    }
....................    if(mp==9){
03C4:  MOVF   26,W
03C5:  SUBLW  09
03C6:  BTFSS  03.2
03C7:  GOTO   3CB
....................       dem = 9;
03C8:  MOVLW  09
03C9:  MOVWF  27
....................       flag++;
03CA:  INCF   28,F
....................    }
03CB:  BCF    0A.3
03CC:  BCF    0A.4
03CD:  GOTO   5C0 (RETURN)
.................... }
.................... void datgioihan()
.................... {
....................    if(flag==1){
*
03F3:  DECFSZ 28,W
03F4:  GOTO   3FC
....................       gioihan=dem*10;
03F5:  MOVF   27,W
03F6:  MOVWF  2F
03F7:  MOVLW  0A
03F8:  MOVWF  30
03F9:  CALL   3CE
03FA:  MOVF   78,W
03FB:  MOVWF  29
....................    }
....................    if(flag==2){
03FC:  MOVF   28,W
03FD:  SUBLW  02
03FE:  BTFSS  03.2
03FF:  GOTO   417
....................       gioihan=gioihan+dem;
0400:  MOVF   27,W
0401:  ADDWF  29,F
....................       flag=0;
0402:  CLRF   28
....................       lcd_gotoxy(1,2);
0403:  MOVLW  01
0404:  MOVWF  3C
0405:  MOVLW  02
0406:  MOVWF  3D
0407:  CALL   182
....................       printf(lcd_putc,"GIOI HAN: %02u", gioihan);
0408:  MOVLW  1A
0409:  BSF    03.6
040A:  MOVWF  0D
040B:  MOVLW  00
040C:  MOVWF  0F
040D:  BCF    03.0
040E:  MOVLW  0A
040F:  BCF    03.6
0410:  MOVWF  30
0411:  CALL   1C0
0412:  MOVF   29,W
0413:  MOVWF  30
0414:  MOVLW  01
0415:  MOVWF  31
0416:  CALL   22C
....................    }
0417:  BCF    0A.3
0418:  BCF    0A.4
0419:  GOTO   5C1 (RETURN)
....................    
.................... }
.................... void quetled()
.................... {  
....................    if(t0if==1){
*
0261:  BTFSS  0B.2
0262:  GOTO   27D
....................       set_timer0(100);
0263:  MOVLW  64
0264:  MOVWF  01
....................       bdn++;
0265:  INCF   2A,F
....................       t0if=0;
0266:  BCF    0B.2
....................       if(bdn==50)
0267:  MOVF   2A,W
0268:  SUBLW  32
0269:  BTFSS  03.2
026A:  GOTO   27D
....................       {
....................          bdn=0;
026B:  CLRF   2A
....................          giay++;
026C:  INCF   25,F
....................          if(giay>59){
026D:  MOVF   25,W
026E:  SUBLW  3B
026F:  BTFSC  03.0
0270:  GOTO   27D
....................             phut++;
0271:  INCF   24,F
....................             giay=0;
0272:  CLRF   25
....................             if(phut>59){
0273:  MOVF   24,W
0274:  SUBLW  3B
0275:  BTFSC  03.0
0276:  GOTO   27D
....................                phut=0;
0277:  CLRF   24
....................                gio++;
0278:  INCF   23,F
....................                if(gio>23){
0279:  MOVF   23,W
027A:  SUBLW  17
027B:  BTFSS  03.0
....................                   gio=0;
027C:  CLRF   23
....................                }
....................             }
....................          }
....................       }
....................    }
....................    output_a(ma7doan[gio/10%10]); output_low(pin_d0); delay_ms(1); output_high(pin_d0);
027D:  MOVF   23,W
027E:  MOVWF  32
027F:  MOVLW  0A
0280:  MOVWF  33
0281:  CALL   217
0282:  MOVF   78,W
0283:  MOVWF  32
0284:  MOVLW  0A
0285:  MOVWF  33
0286:  CALL   217
0287:  MOVF   77,W
0288:  CALL   00C
0289:  MOVWF  2F
028A:  BSF    03.5
028B:  CLRF   05
028C:  BCF    03.5
028D:  MOVF   2F,W
028E:  MOVWF  05
028F:  BSF    03.5
0290:  BCF    08.0
0291:  BCF    03.5
0292:  BCF    08.0
0293:  MOVLW  01
0294:  MOVWF  3C
0295:  CALL   03F
0296:  BSF    03.5
0297:  BCF    08.0
0298:  BCF    03.5
0299:  BSF    08.0
....................    output_a(ma7doan[gio/1%10]); output_low(pin_d1); delay_ms(1); output_high(pin_d1);
029A:  MOVF   23,W
029B:  MOVWF  32
029C:  MOVLW  0A
029D:  MOVWF  33
029E:  CALL   217
029F:  MOVF   77,W
02A0:  CALL   00C
02A1:  MOVWF  2F
02A2:  BSF    03.5
02A3:  CLRF   05
02A4:  BCF    03.5
02A5:  MOVF   2F,W
02A6:  MOVWF  05
02A7:  BSF    03.5
02A8:  BCF    08.1
02A9:  BCF    03.5
02AA:  BCF    08.1
02AB:  MOVLW  01
02AC:  MOVWF  3C
02AD:  CALL   03F
02AE:  BSF    03.5
02AF:  BCF    08.1
02B0:  BCF    03.5
02B1:  BSF    08.1
....................    output_a(ma7doan[phut/10%10]); output_low(pin_d3); delay_ms(1); output_high(pin_d3);
02B2:  MOVF   24,W
02B3:  MOVWF  32
02B4:  MOVLW  0A
02B5:  MOVWF  33
02B6:  CALL   217
02B7:  MOVF   78,W
02B8:  MOVWF  32
02B9:  MOVLW  0A
02BA:  MOVWF  33
02BB:  CALL   217
02BC:  MOVF   77,W
02BD:  CALL   00C
02BE:  MOVWF  2F
02BF:  BSF    03.5
02C0:  CLRF   05
02C1:  BCF    03.5
02C2:  MOVF   2F,W
02C3:  MOVWF  05
02C4:  BSF    03.5
02C5:  BCF    08.3
02C6:  BCF    03.5
02C7:  BCF    08.3
02C8:  MOVLW  01
02C9:  MOVWF  3C
02CA:  CALL   03F
02CB:  BSF    03.5
02CC:  BCF    08.3
02CD:  BCF    03.5
02CE:  BSF    08.3
....................    output_a(ma7doan[phut/1%10]); output_low(pin_d4); delay_ms(1); output_high(pin_d4);
02CF:  MOVF   24,W
02D0:  MOVWF  32
02D1:  MOVLW  0A
02D2:  MOVWF  33
02D3:  CALL   217
02D4:  MOVF   77,W
02D5:  CALL   00C
02D6:  MOVWF  2F
02D7:  BSF    03.5
02D8:  CLRF   05
02D9:  BCF    03.5
02DA:  MOVF   2F,W
02DB:  MOVWF  05
02DC:  BSF    03.5
02DD:  BCF    08.4
02DE:  BCF    03.5
02DF:  BCF    08.4
02E0:  MOVLW  01
02E1:  MOVWF  3C
02E2:  CALL   03F
02E3:  BSF    03.5
02E4:  BCF    08.4
02E5:  BCF    03.5
02E6:  BSF    08.4
....................    output_a(ma7doan[giay/10%10]); output_low(pin_d6); delay_ms(1); output_high(pin_d6);
02E7:  MOVF   25,W
02E8:  MOVWF  32
02E9:  MOVLW  0A
02EA:  MOVWF  33
02EB:  CALL   217
02EC:  MOVF   78,W
02ED:  MOVWF  32
02EE:  MOVLW  0A
02EF:  MOVWF  33
02F0:  CALL   217
02F1:  MOVF   77,W
02F2:  CALL   00C
02F3:  MOVWF  2F
02F4:  BSF    03.5
02F5:  CLRF   05
02F6:  BCF    03.5
02F7:  MOVF   2F,W
02F8:  MOVWF  05
02F9:  BSF    03.5
02FA:  BCF    08.6
02FB:  BCF    03.5
02FC:  BCF    08.6
02FD:  MOVLW  01
02FE:  MOVWF  3C
02FF:  CALL   03F
0300:  BSF    03.5
0301:  BCF    08.6
0302:  BCF    03.5
0303:  BSF    08.6
....................    output_a(ma7doan[giay/1%10]); output_low(pin_d7); delay_ms(1); output_high(pin_d7);
0304:  MOVF   25,W
0305:  MOVWF  32
0306:  MOVLW  0A
0307:  MOVWF  33
0308:  CALL   217
0309:  MOVF   77,W
030A:  CALL   00C
030B:  MOVWF  2F
030C:  BSF    03.5
030D:  CLRF   05
030E:  BCF    03.5
030F:  MOVF   2F,W
0310:  MOVWF  05
0311:  BSF    03.5
0312:  BCF    08.7
0313:  BCF    03.5
0314:  BCF    08.7
0315:  MOVLW  01
0316:  MOVWF  3C
0317:  CALL   03F
0318:  BSF    03.5
0319:  BCF    08.7
031A:  BCF    03.5
031B:  BSF    08.7
....................    output_a(0xbf); output_low(pin_d2); delay_ms(1); output_high(pin_d2);
031C:  BSF    03.5
031D:  CLRF   05
031E:  MOVLW  BF
031F:  BCF    03.5
0320:  MOVWF  05
0321:  BSF    03.5
0322:  BCF    08.2
0323:  BCF    03.5
0324:  BCF    08.2
0325:  MOVLW  01
0326:  MOVWF  3C
0327:  CALL   03F
0328:  BSF    03.5
0329:  BCF    08.2
032A:  BCF    03.5
032B:  BSF    08.2
....................    output_a(0xbf); output_low(pin_d5); delay_ms(1); output_high(pin_d5);
032C:  BSF    03.5
032D:  CLRF   05
032E:  MOVLW  BF
032F:  BCF    03.5
0330:  MOVWF  05
0331:  BSF    03.5
0332:  BCF    08.5
0333:  BCF    03.5
0334:  BCF    08.5
0335:  MOVLW  01
0336:  MOVWF  3C
0337:  CALL   03F
0338:  BSF    03.5
0339:  BCF    08.5
033A:  BCF    03.5
033B:  BSF    08.5
033C:  BCF    0A.3
033D:  BCF    0A.4
033E:  GOTO   5BF (RETURN)
.................... }
.................... void demsp(unsigned int8 datgioihan)
.................... {
....................    kq=get_timer1();
*
041A:  MOVF   0F,W
041B:  MOVWF  7A
041C:  MOVF   0E,W
041D:  MOVWF  77
041E:  MOVF   0F,W
041F:  SUBWF  7A,W
0420:  BTFSS  03.2
0421:  GOTO   41A
0422:  MOVF   77,W
0423:  MOVWF  21
....................    if(kq>datgioihan) set_timer1(1);
0424:  MOVF   21,W
0425:  SUBWF  2F,W
0426:  BTFSC  03.0
0427:  GOTO   42D
0428:  CLRF   0E
0429:  CLRF   0F
042A:  MOVLW  01
042B:  MOVWF  0E
042C:  NOP
....................    lcd_gotoxy(1,1);
042D:  MOVLW  01
042E:  MOVWF  3C
042F:  MOVWF  3D
0430:  CALL   182
....................    printf(lcd_putc,"SAN PHAM: %02u CAI",kq);
0431:  MOVLW  22
0432:  BSF    03.6
0433:  MOVWF  0D
0434:  MOVLW  00
0435:  MOVWF  0F
0436:  BCF    03.0
0437:  MOVLW  0A
0438:  BCF    03.6
0439:  MOVWF  30
043A:  CALL   1C0
043B:  MOVF   21,W
043C:  MOVWF  30
043D:  MOVLW  01
043E:  MOVWF  31
043F:  CALL   22C
0440:  MOVLW  29
0441:  BSF    03.6
0442:  MOVWF  0D
0443:  MOVLW  00
0444:  MOVWF  0F
0445:  BCF    03.0
0446:  MOVLW  04
0447:  BCF    03.6
0448:  MOVWF  30
0449:  CALL   1C0
....................    if(input(pin_c3) == 0)
044A:  BSF    20.3
044B:  MOVF   20,W
044C:  BSF    03.5
044D:  MOVWF  07
044E:  BCF    03.5
044F:  BTFSC  07.3
0450:  GOTO   46F
....................    {
....................       delay_ms(20);
0451:  MOVLW  14
0452:  MOVWF  3C
0453:  CALL   03F
....................       if(input(pin_c3) == 0)
0454:  BSF    20.3
0455:  MOVF   20,W
0456:  BSF    03.5
0457:  MOVWF  07
0458:  BCF    03.5
0459:  BTFSC  07.3
045A:  GOTO   46F
....................       {
....................          ttdem =! ttdem;
045B:  MOVF   22,F
045C:  BTFSC  03.2
045D:  GOTO   460
045E:  MOVLW  00
045F:  GOTO   461
0460:  MOVLW  01
0461:  MOVWF  22
....................          if(ttdem==1) setup_timer_1(t1_external|t1_div_by_1);
0462:  DECFSZ 22,W
0463:  GOTO   467
0464:  MOVLW  07
0465:  MOVWF  10
0466:  GOTO   468
....................          else setup_timer_1(t1_disabled);
0467:  CLRF   10
....................          while(input(pin_c3)==0);
0468:  BSF    20.3
0469:  MOVF   20,W
046A:  BSF    03.5
046B:  MOVWF  07
046C:  BCF    03.5
046D:  BTFSS  07.3
046E:  GOTO   468
....................       }
....................    }
046F:  BCF    0A.3
0470:  BCF    0A.4
0471:  GOTO   5C4 (RETURN)
.................... }
.................... void nangsuat()
.................... {
....................    if(gio==0){
*
04C1:  MOVF   23,F
04C2:  BTFSS  03.2
04C3:  GOTO   4D2
....................       if(phut>0)
04C4:  MOVF   24,F
04C5:  BTFSC  03.2
04C6:  GOTO   4D1
....................       ns=kq/phut;
04C7:  MOVF   21,W
04C8:  MOVWF  32
04C9:  MOVF   24,W
04CA:  MOVWF  33
04CB:  CALL   217
04CC:  CLRF   2E
04CD:  CLRF   2D
04CE:  CLRF   2C
04CF:  MOVF   78,W
04D0:  MOVWF  2B
....................    }
04D1:  GOTO   4E4
....................    else{
....................       ns=kq/(gio*60+phut);
04D2:  MOVF   23,W
04D3:  MOVWF  2F
04D4:  MOVLW  3C
04D5:  MOVWF  30
04D6:  CALL   3CE
04D7:  MOVF   24,W
04D8:  ADDWF  78,W
04D9:  MOVWF  2F
04DA:  MOVF   21,W
04DB:  MOVWF  32
04DC:  MOVF   2F,W
04DD:  MOVWF  33
04DE:  CALL   217
04DF:  CLRF   2E
04E0:  CLRF   2D
04E1:  CLRF   2C
04E2:  MOVF   78,W
04E3:  MOVWF  2B
....................    }
....................    lcd_gotoxy(21,1);
04E4:  MOVLW  15
04E5:  MOVWF  3C
04E6:  MOVLW  01
04E7:  MOVWF  3D
04E8:  CALL   182
....................    printf(lcd_putc,"NANG SUAT: %02lu CAI",ns);
04E9:  MOVLW  2C
04EA:  BSF    03.6
04EB:  MOVWF  0D
04EC:  MOVLW  00
04ED:  MOVWF  0F
04EE:  BCF    03.0
04EF:  MOVLW  0B
04F0:  BCF    03.6
04F1:  MOVWF  30
04F2:  CALL   1C0
04F3:  MOVLW  42
04F4:  MOVWF  04
04F5:  MOVF   2E,W
04F6:  MOVWF  32
04F7:  MOVF   2D,W
04F8:  MOVWF  31
04F9:  MOVF   2C,W
04FA:  MOVWF  30
04FB:  MOVF   2B,W
04FC:  MOVWF  2F
*
0553:  MOVLW  34
0554:  BSF    03.6
0555:  MOVWF  0D
0556:  MOVLW  00
0557:  MOVWF  0F
0558:  BCF    03.0
0559:  MOVLW  04
055A:  BCF    03.6
055B:  MOVWF  30
055C:  CALL   1C0
055D:  BCF    0A.3
055E:  BCF    0A.4
055F:  GOTO   5C5 (RETURN)
.................... }
.................... void main()
0560:  MOVF   03,W
0561:  ANDLW  1F
0562:  MOVWF  03
0563:  MOVLW  71
0564:  BSF    03.5
0565:  MOVWF  0F
0566:  CLRF   10
0567:  MOVF   0F,W
0568:  MOVLW  FF
0569:  BCF    03.5
056A:  MOVWF  20
056B:  CLRF   21
056C:  MOVLW  01
056D:  MOVWF  22
056E:  CLRF   23
056F:  CLRF   24
0570:  CLRF   25
0571:  CLRF   28
0572:  MOVLW  14
0573:  MOVWF  29
0574:  CLRF   2A
0575:  CLRF   2E
0576:  CLRF   2D
0577:  CLRF   2C
0578:  CLRF   2B
0579:  BSF    03.5
057A:  BSF    03.6
057B:  MOVF   09,W
057C:  ANDLW  C0
057D:  MOVWF  09
057E:  BCF    03.6
057F:  BCF    1F.4
0580:  BCF    1F.5
0581:  MOVLW  00
0582:  BSF    03.6
0583:  MOVWF  08
0584:  BCF    03.5
0585:  CLRF   07
0586:  CLRF   08
0587:  CLRF   09
0588:  BCF    03.7
.................... {  
....................    set_tris_a(0);
0589:  MOVLW  00
058A:  BSF    03.5
058B:  BCF    03.6
058C:  MOVWF  05
....................    set_tris_b(0xff);
058D:  MOVLW  FF
058E:  MOVWF  06
....................    set_tris_c(0X09);
058F:  MOVLW  09
0590:  MOVWF  07
0591:  BCF    03.5
0592:  MOVWF  20
....................    set_tris_d(0);
0593:  MOVLW  00
0594:  BSF    03.5
0595:  MOVWF  08
....................    set_tris_e(0);
0596:  BCF    09.0
0597:  BCF    09.1
0598:  BCF    09.2
0599:  BCF    09.3
....................    setup_timer_1(t1_external|t1_div_by_1);
059A:  MOVLW  07
059B:  BCF    03.5
059C:  MOVWF  10
....................    set_timer1(0);
059D:  CLRF   0E
059E:  CLRF   0F
059F:  CLRF   0E
05A0:  NOP
....................    setup_timer_0(t0_internal|t0_div_256);
05A1:  BSF    03.5
05A2:  MOVF   01,W
05A3:  ANDLW  C0
05A4:  IORLW  07
05A5:  MOVWF  01
....................    set_timer0(100);
05A6:  MOVLW  64
05A7:  BCF    03.5
05A8:  MOVWF  01
....................    lcd_init();
05A9:  GOTO   12C
....................    lcd_gotoxy(1,2);
05AA:  MOVLW  01
05AB:  MOVWF  3C
05AC:  MOVLW  02
05AD:  MOVWF  3D
05AE:  CALL   182
....................    printf(lcd_putc,"GIOI HAN: %02u", gioihan);
05AF:  MOVLW  37
05B0:  BSF    03.6
05B1:  MOVWF  0D
05B2:  MOVLW  00
05B3:  MOVWF  0F
05B4:  BCF    03.0
05B5:  MOVLW  0A
05B6:  BCF    03.6
05B7:  MOVWF  30
05B8:  CALL   1C0
05B9:  MOVF   29,W
05BA:  MOVWF  30
05BB:  MOVLW  01
05BC:  MOVWF  31
05BD:  CALL   22C
....................    while(true)
....................    {
....................       quetled();
05BE:  GOTO   261
....................       matranphim();
05BF:  GOTO   33F
....................       datgioihan();
05C0:  GOTO   3F3
....................       demsp(gioihan);
05C1:  MOVF   29,W
05C2:  MOVWF  2F
05C3:  GOTO   41A
....................       nangsuat();
05C4:  GOTO   4C1
05C5:  GOTO   5BE
....................    }
.................... }
.................... 
05C6:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
