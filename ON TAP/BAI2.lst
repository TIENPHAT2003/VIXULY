CCS PCM C Compiler, Version 5.112, 43599               19-Oct-23 10:38

               Filename:   C:\Users\defaultuser0.LAPTOP-POTNR7PE\OneDrive - hcmute.edu.vn\Desktop\VXL\ON TAP\BAI2.lst

               ROM used:   918 words (11%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           26 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   355
0003:  NOP
.................... #include<16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
000B:  RETLW  B0
000C:  RETLW  99
000D:  RETLW  92
000E:  RETLW  82
000F:  RETLW  F8
0010:  RETLW  80
0011:  RETLW  90
0012:  DATA D3,20
0013:  DATA 4E,10
0014:  DATA 50,24
0015:  DATA C1,26
0016:  DATA 3A,10
0017:  DATA 25,18
0018:  DATA B2,3A
0019:  DATA A0,21
001A:  DATA C1,24
001B:  DATA 00,00
*
019D:  MOVF   0B,W
019E:  MOVWF  27
019F:  BCF    0B.7
01A0:  BSF    03.5
01A1:  BSF    03.6
01A2:  BSF    0C.7
01A3:  BSF    0C.0
01A4:  NOP
01A5:  NOP
01A6:  BCF    03.5
01A7:  BCF    03.6
01A8:  BTFSC  27.7
01A9:  BSF    0B.7
01AA:  BTFSC  03.0
01AB:  GOTO   1D4
01AC:  BSF    03.6
01AD:  MOVF   0C,W
01AE:  ANDLW  7F
01AF:  BCF    03.6
01B0:  MOVWF  27
01B1:  BSF    03.6
01B2:  MOVF   0D,W
01B3:  BCF    03.6
01B4:  MOVWF  28
01B5:  BSF    03.6
01B6:  MOVF   0F,W
01B7:  BCF    03.6
01B8:  MOVWF  29
01B9:  MOVF   27,W
01BA:  MOVWF  2A
01BB:  CALL   171
01BC:  MOVF   28,W
01BD:  BSF    03.6
01BE:  MOVWF  0D
01BF:  BCF    03.6
01C0:  MOVF   29,W
01C1:  BSF    03.6
01C2:  MOVWF  0F
01C3:  BCF    03.6
01C4:  MOVF   0B,W
01C5:  MOVWF  2A
01C6:  BCF    0B.7
01C7:  BSF    03.5
01C8:  BSF    03.6
01C9:  BSF    0C.7
01CA:  BSF    0C.0
01CB:  NOP
01CC:  NOP
01CD:  BCF    03.5
01CE:  BCF    03.6
01CF:  BTFSC  2A.7
01D0:  BSF    0B.7
01D1:  DECFSZ 26,F
01D2:  GOTO   1D4
01D3:  GOTO   1F3
01D4:  BSF    03.6
01D5:  RLF    0C,W
01D6:  RLF    0E,W
01D7:  ANDLW  7F
01D8:  BCF    03.6
01D9:  MOVWF  27
01DA:  BSF    03.6
01DB:  MOVF   0D,W
01DC:  BCF    03.6
01DD:  MOVWF  28
01DE:  BSF    03.6
01DF:  MOVF   0F,W
01E0:  BCF    03.6
01E1:  MOVWF  29
01E2:  MOVF   27,W
01E3:  MOVWF  2A
01E4:  CALL   171
01E5:  MOVF   28,W
01E6:  BSF    03.6
01E7:  MOVWF  0D
01E8:  BCF    03.6
01E9:  MOVF   29,W
01EA:  BSF    03.6
01EB:  MOVWF  0F
01EC:  INCF   0D,F
01ED:  BTFSC  03.2
01EE:  INCF   0F,F
01EF:  BCF    03.0
01F0:  BCF    03.6
01F1:  DECFSZ 26,F
01F2:  GOTO   19D
01F3:  RETURN
01F4:  MOVF   29,W
01F5:  CLRF   78
01F6:  SUBWF  28,W
01F7:  BTFSC  03.0
01F8:  GOTO   1FC
01F9:  MOVF   28,W
01FA:  MOVWF  77
01FB:  GOTO   208
01FC:  CLRF   77
01FD:  MOVLW  08
01FE:  MOVWF  2A
01FF:  RLF    28,F
0200:  RLF    77,F
0201:  MOVF   29,W
0202:  SUBWF  77,W
0203:  BTFSC  03.0
0204:  MOVWF  77
0205:  RLF    78,F
0206:  DECFSZ 2A,F
0207:  GOTO   1FF
0208:  RETURN
*
022E:  MOVF   26,W
022F:  MOVWF  28
0230:  MOVLW  64
0231:  MOVWF  29
0232:  CALL   1F4
0233:  MOVF   77,W
0234:  MOVWF  26
0235:  MOVF   78,W
0236:  MOVLW  30
0237:  BTFSS  03.2
0238:  GOTO   240
0239:  BTFSS  27.1
023A:  GOTO   247
023B:  BTFSC  27.3
023C:  GOTO   247
023D:  BTFSC  27.4
023E:  MOVLW  20
023F:  GOTO   243
0240:  BCF    27.3
0241:  BCF    27.4
0242:  BSF    27.0
0243:  ADDWF  78,F
0244:  MOVF   78,W
0245:  MOVWF  2A
0246:  CALL   171
0247:  MOVF   26,W
0248:  MOVWF  28
0249:  MOVLW  0A
024A:  MOVWF  29
024B:  CALL   1F4
024C:  MOVF   77,W
024D:  MOVWF  26
024E:  MOVF   78,W
024F:  MOVLW  30
0250:  BTFSS  03.2
0251:  GOTO   258
0252:  BTFSC  27.3
0253:  GOTO   25C
0254:  BTFSS  27.0
0255:  GOTO   25C
0256:  BTFSC  27.4
0257:  MOVLW  20
0258:  ADDWF  78,F
0259:  MOVF   78,W
025A:  MOVWF  2A
025B:  CALL   171
025C:  MOVLW  30
025D:  ADDWF  26,F
025E:  MOVF   26,W
025F:  MOVWF  2A
0260:  CALL   171
.................... 
.................... #list
.................... 
.................... #fuses intrc_io
.................... #use delay(clock=8M)
*
001C:  MOVLW  2B
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   02F
0022:  MOVLW  02
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  97
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 00,F
002E:  GOTO   022
002F:  RETURN
.................... 
.................... #define LCD_ENABLE_PIN  PIN_E2                                    
.................... #define LCD_RS_PIN      PIN_E0                                 
.................... #define LCD_RW_PIN      PIN_E1                                  
.................... #define LCD_DATA4       PIN_C4                                 
.................... #define LCD_DATA5       PIN_c5                                   
.................... #define LCD_DATA6       PIN_c6                                    
.................... #define LCD_DATA7       PIN_c7
.................... #include<tvkey4x4.c>
.................... unsigned int8 key_4x4()
.................... {
....................       const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................       unsigned int8 mp=0xff,cot;
....................       for(cot=0;cot<4;cot++)
....................       {
....................             output_b(mq[cot]);
....................             while(input(pin_b0)==0) mp= cot*4 + 0;
....................             while(input(pin_b1)==0) mp= cot*4 + 1;
....................             while(input(pin_b2)==0) mp= cot*4 + 2;
....................             while(input(pin_b3)==0) mp= cot*4 + 3;
....................       }
....................       return mp;
.................... }
.................... 
.................... #include<LCD.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00A5:  BSF    07.4
....................    output_float(LCD_DATA5);
00A6:  BSF    07.5
....................    output_float(LCD_DATA6);
00A7:  BSF    07.6
....................    output_float(LCD_DATA7);
00A8:  BSF    07.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00A9:  BCF    03.5
00AA:  BSF    09.1
00AB:  BSF    03.5
00AC:  BCF    09.1
....................    delay_cycles(1);
00AD:  NOP
....................    lcd_output_enable(1);
00AE:  BCF    03.5
00AF:  BSF    09.2
00B0:  BSF    03.5
00B1:  BCF    09.2
....................    delay_cycles(1);
00B2:  NOP
....................    high = lcd_read_nibble();
00B3:  BCF    03.5
00B4:  CALL   064
00B5:  MOVF   78,W
00B6:  MOVWF  32
....................       
....................    lcd_output_enable(0);
00B7:  BCF    09.2
00B8:  BSF    03.5
00B9:  BCF    09.2
....................    delay_cycles(1);
00BA:  NOP
....................    lcd_output_enable(1);
00BB:  BCF    03.5
00BC:  BSF    09.2
00BD:  BSF    03.5
00BE:  BCF    09.2
....................    delay_us(1);
00BF:  GOTO   0C0
....................    low = lcd_read_nibble();
00C0:  BCF    03.5
00C1:  CALL   064
00C2:  MOVF   78,W
00C3:  MOVWF  31
....................       
....................    lcd_output_enable(0);
00C4:  BCF    09.2
00C5:  BSF    03.5
00C6:  BCF    09.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00C7:  BCF    03.5
00C8:  BCF    20.4
00C9:  MOVF   20,W
00CA:  BSF    03.5
00CB:  MOVWF  07
....................    output_drive(LCD_DATA5);
00CC:  BCF    03.5
00CD:  BCF    20.5
00CE:  MOVF   20,W
00CF:  BSF    03.5
00D0:  MOVWF  07
....................    output_drive(LCD_DATA6);
00D1:  BCF    03.5
00D2:  BCF    20.6
00D3:  MOVF   20,W
00D4:  BSF    03.5
00D5:  MOVWF  07
....................    output_drive(LCD_DATA7);
00D6:  BCF    03.5
00D7:  BCF    20.7
00D8:  MOVF   20,W
00D9:  BSF    03.5
00DA:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00DB:  BCF    03.5
00DC:  SWAPF  32,W
00DD:  MOVWF  77
00DE:  MOVLW  F0
00DF:  ANDWF  77,F
00E0:  MOVF   77,W
00E1:  IORWF  31,W
00E2:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0064:  CLRF   33
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0065:  BSF    20.4
0066:  MOVF   20,W
0067:  BSF    03.5
0068:  MOVWF  07
0069:  MOVLW  00
006A:  BCF    03.5
006B:  BTFSC  07.4
006C:  MOVLW  01
006D:  IORWF  33,F
....................    n |= input(LCD_DATA5) << 1;
006E:  BSF    20.5
006F:  MOVF   20,W
0070:  BSF    03.5
0071:  MOVWF  07
0072:  MOVLW  00
0073:  BCF    03.5
0074:  BTFSC  07.5
0075:  MOVLW  01
0076:  MOVWF  77
0077:  BCF    03.0
0078:  RLF    77,F
0079:  MOVF   77,W
007A:  IORWF  33,F
....................    n |= input(LCD_DATA6) << 2;
007B:  BSF    20.6
007C:  MOVF   20,W
007D:  BSF    03.5
007E:  MOVWF  07
007F:  MOVLW  00
0080:  BCF    03.5
0081:  BTFSC  07.6
0082:  MOVLW  01
0083:  MOVWF  77
0084:  RLF    77,F
0085:  RLF    77,F
0086:  MOVLW  FC
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  33,F
....................    n |= input(LCD_DATA7) << 3;
008A:  BSF    20.7
008B:  MOVF   20,W
008C:  BSF    03.5
008D:  MOVWF  07
008E:  MOVLW  00
008F:  BCF    03.5
0090:  BTFSC  07.7
0091:  MOVLW  01
0092:  MOVWF  77
0093:  RLF    77,F
0094:  RLF    77,F
0095:  RLF    77,F
0096:  MOVLW  F8
0097:  ANDWF  77,F
0098:  MOVF   77,W
0099:  IORWF  33,F
....................    
....................    return(n);
009A:  MOVF   33,W
009B:  MOVWF  78
....................   #else
009C:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0030:  BTFSC  32.0
0031:  GOTO   034
0032:  BCF    07.4
0033:  GOTO   035
0034:  BSF    07.4
0035:  BCF    20.4
0036:  MOVF   20,W
0037:  BSF    03.5
0038:  MOVWF  07
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0039:  BCF    03.5
003A:  BTFSC  32.1
003B:  GOTO   03E
003C:  BCF    07.5
003D:  GOTO   03F
003E:  BSF    07.5
003F:  BCF    20.5
0040:  MOVF   20,W
0041:  BSF    03.5
0042:  MOVWF  07
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0043:  BCF    03.5
0044:  BTFSC  32.2
0045:  GOTO   048
0046:  BCF    07.6
0047:  GOTO   049
0048:  BSF    07.6
0049:  BCF    20.6
004A:  MOVF   20,W
004B:  BSF    03.5
004C:  MOVWF  07
....................    output_bit(LCD_DATA7, bit_test(n, 3));
004D:  BCF    03.5
004E:  BTFSC  32.3
004F:  GOTO   052
0050:  BCF    07.7
0051:  GOTO   053
0052:  BSF    07.7
0053:  BCF    20.7
0054:  MOVF   20,W
0055:  BSF    03.5
0056:  MOVWF  07
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0057:  NOP
....................    lcd_output_enable(1);
0058:  BCF    03.5
0059:  BSF    09.2
005A:  BSF    03.5
005B:  BCF    09.2
....................    delay_us(2);
005C:  GOTO   05D
005D:  GOTO   05E
....................    lcd_output_enable(0);
005E:  BCF    03.5
005F:  BCF    09.2
0060:  BSF    03.5
0061:  BCF    09.2
0062:  BCF    03.5
0063:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
009D:  BSF    03.5
009E:  BCF    09.2
....................    lcd_rs_tris();
009F:  BCF    09.0
....................    lcd_rw_tris();
00A0:  BCF    09.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
00A1:  BCF    03.5
00A2:  BCF    09.0
00A3:  BSF    03.5
00A4:  BCF    09.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00E3:  MOVF   78,W
00E4:  MOVWF  31
00E5:  BTFSS  31.7
00E6:  GOTO   0E9
00E7:  BSF    03.5
00E8:  GOTO   0A5
....................    lcd_output_rs(address);
00E9:  MOVF   2F,F
00EA:  BTFSS  03.2
00EB:  GOTO   0EE
00EC:  BCF    09.0
00ED:  GOTO   0EF
00EE:  BSF    09.0
00EF:  BSF    03.5
00F0:  BCF    09.0
....................    delay_cycles(1);
00F1:  NOP
....................    lcd_output_rw(0);
00F2:  BCF    03.5
00F3:  BCF    09.1
00F4:  BSF    03.5
00F5:  BCF    09.1
....................    delay_cycles(1);
00F6:  NOP
....................    lcd_output_enable(0);
00F7:  BCF    03.5
00F8:  BCF    09.2
00F9:  BSF    03.5
00FA:  BCF    09.2
....................    lcd_send_nibble(n >> 4);
00FB:  BCF    03.5
00FC:  SWAPF  30,W
00FD:  MOVWF  31
00FE:  MOVLW  0F
00FF:  ANDWF  31,F
0100:  MOVF   31,W
0101:  MOVWF  32
0102:  CALL   030
....................    lcd_send_nibble(n & 0xf);
0103:  MOVF   30,W
0104:  ANDLW  0F
0105:  MOVWF  31
0106:  MOVWF  32
0107:  CALL   030
0108:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0109:  MOVLW  28
010A:  MOVWF  27
010B:  MOVLW  0C
010C:  MOVWF  28
010D:  MOVLW  01
010E:  MOVWF  29
010F:  MOVLW  06
0110:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0111:  BCF    09.2
0112:  BSF    03.5
0113:  BCF    09.2
....................    lcd_output_rs(0);
0114:  BCF    03.5
0115:  BCF    09.0
0116:  BSF    03.5
0117:  BCF    09.0
....................    lcd_output_rw(0);
0118:  BCF    03.5
0119:  BCF    09.1
011A:  BSF    03.5
011B:  BCF    09.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
011C:  BCF    03.5
011D:  BCF    20.4
011E:  MOVF   20,W
011F:  BSF    03.5
0120:  MOVWF  07
....................    output_drive(LCD_DATA5);
0121:  BCF    03.5
0122:  BCF    20.5
0123:  MOVF   20,W
0124:  BSF    03.5
0125:  MOVWF  07
....................    output_drive(LCD_DATA6);
0126:  BCF    03.5
0127:  BCF    20.6
0128:  MOVF   20,W
0129:  BSF    03.5
012A:  MOVWF  07
....................    output_drive(LCD_DATA7);
012B:  BCF    03.5
012C:  BCF    20.7
012D:  MOVF   20,W
012E:  BSF    03.5
012F:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0130:  BCF    09.2
....................    lcd_rs_tris();
0131:  BCF    09.0
....................    lcd_rw_tris();
0132:  BCF    09.1
....................  #endif
....................     
....................    delay_ms(15);
0133:  MOVLW  0F
0134:  BCF    03.5
0135:  MOVWF  2B
0136:  CALL   01C
....................    for(i=1;i<=3;++i)
0137:  MOVLW  01
0138:  MOVWF  26
0139:  MOVF   26,W
013A:  SUBLW  03
013B:  BTFSS  03.0
013C:  GOTO   145
....................    {
....................        lcd_send_nibble(3);
013D:  MOVLW  03
013E:  MOVWF  32
013F:  CALL   030
....................        delay_ms(5);
0140:  MOVLW  05
0141:  MOVWF  2B
0142:  CALL   01C
0143:  INCF   26,F
0144:  GOTO   139
....................    }
....................    
....................    lcd_send_nibble(2);
0145:  MOVLW  02
0146:  MOVWF  32
0147:  CALL   030
....................    delay_ms(5);
0148:  MOVLW  05
0149:  MOVWF  2B
014A:  CALL   01C
....................    for(i=0;i<=3;++i)
014B:  CLRF   26
014C:  MOVF   26,W
014D:  SUBLW  03
014E:  BTFSS  03.0
014F:  GOTO   15C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0150:  MOVLW  27
0151:  ADDWF  26,W
0152:  MOVWF  04
0153:  BCF    03.7
0154:  MOVF   00,W
0155:  MOVWF  2B
0156:  CLRF   2F
0157:  MOVF   2B,W
0158:  MOVWF  30
0159:  CALL   09D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
015A:  INCF   26,F
015B:  GOTO   14C
015C:  BCF    0A.3
015D:  BCF    0A.4
015E:  GOTO   392 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
015F:  DECFSZ 2C,W
0160:  GOTO   162
0161:  GOTO   165
....................       address=LCD_LINE_TWO;
0162:  MOVLW  40
0163:  MOVWF  2D
0164:  GOTO   166
....................    else
....................       address=0;
0165:  CLRF   2D
....................      
....................    address+=x-1;
0166:  MOVLW  01
0167:  SUBWF  2B,W
0168:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address);
0169:  MOVF   2D,W
016A:  IORLW  80
016B:  MOVWF  2E
016C:  CLRF   2F
016D:  MOVF   2E,W
016E:  MOVWF  30
016F:  CALL   09D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0170:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0171:  MOVF   2A,W
0172:  XORLW  07
0173:  BTFSC  03.2
0174:  GOTO   17F
0175:  XORLW  0B
0176:  BTFSC  03.2
0177:  GOTO   184
0178:  XORLW  06
0179:  BTFSC  03.2
017A:  GOTO   18C
017B:  XORLW  02
017C:  BTFSC  03.2
017D:  GOTO   192
017E:  GOTO   197
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
017F:  MOVLW  01
0180:  MOVWF  2B
0181:  MOVWF  2C
0182:  CALL   15F
0183:  GOTO   19C
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0184:  CLRF   2F
0185:  MOVLW  01
0186:  MOVWF  30
0187:  CALL   09D
....................                      delay_ms(2);
0188:  MOVLW  02
0189:  MOVWF  2B
018A:  CALL   01C
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
018B:  GOTO   19C
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
018C:  MOVLW  01
018D:  MOVWF  2B
018E:  MOVLW  02
018F:  MOVWF  2C
0190:  CALL   15F
0191:  GOTO   19C
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0192:  CLRF   2F
0193:  MOVLW  10
0194:  MOVWF  30
0195:  CALL   09D
0196:  GOTO   19C
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0197:  MOVLW  01
0198:  MOVWF  2F
0199:  MOVF   2A,W
019A:  MOVWF  30
019B:  CALL   09D
....................      #endif
....................    }
019C:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... const unsigned int8 ma7doan[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
.................... unsigned int8 kq=0, ttdem =1, gio=23,phut=59,giay=59;
.................... 
.................... void quetled()
.................... {
....................    output_a(ma7doan[gio/10%10]); output_low(pin_d0); delay_ms(1); output_high(pin_d0);
*
0293:  MOVF   23,W
0294:  MOVWF  28
0295:  MOVLW  0A
0296:  MOVWF  29
0297:  CALL   1F4
0298:  MOVF   78,W
0299:  MOVWF  28
029A:  MOVLW  0A
029B:  MOVWF  29
029C:  CALL   1F4
029D:  MOVF   77,W
029E:  CALL   004
029F:  MOVWF  26
02A0:  BSF    03.5
02A1:  CLRF   05
02A2:  BCF    03.5
02A3:  MOVF   26,W
02A4:  MOVWF  05
02A5:  BSF    03.5
02A6:  BCF    08.0
02A7:  BCF    03.5
02A8:  BCF    08.0
02A9:  MOVLW  01
02AA:  MOVWF  2B
02AB:  CALL   01C
02AC:  BSF    03.5
02AD:  BCF    08.0
02AE:  BCF    03.5
02AF:  BSF    08.0
....................    output_a(ma7doan[gio/1%10]); output_low(pin_d1); delay_ms(1); output_high(pin_d1);
02B0:  MOVF   23,W
02B1:  MOVWF  28
02B2:  MOVLW  0A
02B3:  MOVWF  29
02B4:  CALL   1F4
02B5:  MOVF   77,W
02B6:  CALL   004
02B7:  MOVWF  26
02B8:  BSF    03.5
02B9:  CLRF   05
02BA:  BCF    03.5
02BB:  MOVF   26,W
02BC:  MOVWF  05
02BD:  BSF    03.5
02BE:  BCF    08.1
02BF:  BCF    03.5
02C0:  BCF    08.1
02C1:  MOVLW  01
02C2:  MOVWF  2B
02C3:  CALL   01C
02C4:  BSF    03.5
02C5:  BCF    08.1
02C6:  BCF    03.5
02C7:  BSF    08.1
....................    output_a(ma7doan[phut/10%10]); output_low(pin_d3); delay_ms(1); output_high(pin_d3);
02C8:  MOVF   24,W
02C9:  MOVWF  28
02CA:  MOVLW  0A
02CB:  MOVWF  29
02CC:  CALL   1F4
02CD:  MOVF   78,W
02CE:  MOVWF  28
02CF:  MOVLW  0A
02D0:  MOVWF  29
02D1:  CALL   1F4
02D2:  MOVF   77,W
02D3:  CALL   004
02D4:  MOVWF  26
02D5:  BSF    03.5
02D6:  CLRF   05
02D7:  BCF    03.5
02D8:  MOVF   26,W
02D9:  MOVWF  05
02DA:  BSF    03.5
02DB:  BCF    08.3
02DC:  BCF    03.5
02DD:  BCF    08.3
02DE:  MOVLW  01
02DF:  MOVWF  2B
02E0:  CALL   01C
02E1:  BSF    03.5
02E2:  BCF    08.3
02E3:  BCF    03.5
02E4:  BSF    08.3
....................    output_a(ma7doan[phut/1%10]); output_low(pin_d4); delay_ms(1); output_high(pin_d4);
02E5:  MOVF   24,W
02E6:  MOVWF  28
02E7:  MOVLW  0A
02E8:  MOVWF  29
02E9:  CALL   1F4
02EA:  MOVF   77,W
02EB:  CALL   004
02EC:  MOVWF  26
02ED:  BSF    03.5
02EE:  CLRF   05
02EF:  BCF    03.5
02F0:  MOVF   26,W
02F1:  MOVWF  05
02F2:  BSF    03.5
02F3:  BCF    08.4
02F4:  BCF    03.5
02F5:  BCF    08.4
02F6:  MOVLW  01
02F7:  MOVWF  2B
02F8:  CALL   01C
02F9:  BSF    03.5
02FA:  BCF    08.4
02FB:  BCF    03.5
02FC:  BSF    08.4
....................    output_a(ma7doan[giay/10%10]); output_low(pin_d6); delay_ms(1); output_high(pin_d6);
02FD:  MOVF   25,W
02FE:  MOVWF  28
02FF:  MOVLW  0A
0300:  MOVWF  29
0301:  CALL   1F4
0302:  MOVF   78,W
0303:  MOVWF  28
0304:  MOVLW  0A
0305:  MOVWF  29
0306:  CALL   1F4
0307:  MOVF   77,W
0308:  CALL   004
0309:  MOVWF  26
030A:  BSF    03.5
030B:  CLRF   05
030C:  BCF    03.5
030D:  MOVF   26,W
030E:  MOVWF  05
030F:  BSF    03.5
0310:  BCF    08.6
0311:  BCF    03.5
0312:  BCF    08.6
0313:  MOVLW  01
0314:  MOVWF  2B
0315:  CALL   01C
0316:  BSF    03.5
0317:  BCF    08.6
0318:  BCF    03.5
0319:  BSF    08.6
....................    output_a(ma7doan[giay/1%10]); output_low(pin_d7); delay_ms(1); output_high(pin_d7);
031A:  MOVF   25,W
031B:  MOVWF  28
031C:  MOVLW  0A
031D:  MOVWF  29
031E:  CALL   1F4
031F:  MOVF   77,W
0320:  CALL   004
0321:  MOVWF  26
0322:  BSF    03.5
0323:  CLRF   05
0324:  BCF    03.5
0325:  MOVF   26,W
0326:  MOVWF  05
0327:  BSF    03.5
0328:  BCF    08.7
0329:  BCF    03.5
032A:  BCF    08.7
032B:  MOVLW  01
032C:  MOVWF  2B
032D:  CALL   01C
032E:  BSF    03.5
032F:  BCF    08.7
0330:  BCF    03.5
0331:  BSF    08.7
....................    output_a(0xbf); output_low(pin_d2); delay_ms(1); output_high(pin_d2);
0332:  BSF    03.5
0333:  CLRF   05
0334:  MOVLW  BF
0335:  BCF    03.5
0336:  MOVWF  05
0337:  BSF    03.5
0338:  BCF    08.2
0339:  BCF    03.5
033A:  BCF    08.2
033B:  MOVLW  01
033C:  MOVWF  2B
033D:  CALL   01C
033E:  BSF    03.5
033F:  BCF    08.2
0340:  BCF    03.5
0341:  BSF    08.2
....................    output_a(0xbf); output_low(pin_d5); delay_ms(1); output_high(pin_d5);
0342:  BSF    03.5
0343:  CLRF   05
0344:  MOVLW  BF
0345:  BCF    03.5
0346:  MOVWF  05
0347:  BSF    03.5
0348:  BCF    08.5
0349:  BCF    03.5
034A:  BCF    08.5
034B:  MOVLW  01
034C:  MOVWF  2B
034D:  CALL   01C
034E:  BSF    03.5
034F:  BCF    08.5
0350:  BCF    03.5
0351:  BSF    08.5
0352:  BCF    0A.3
0353:  BCF    0A.4
0354:  GOTO   394 (RETURN)
.................... }
.................... void demsp()
.................... {
....................    kq=get_timer1();
*
0209:  MOVF   0F,W
020A:  MOVWF  7A
020B:  MOVF   0E,W
020C:  MOVWF  77
020D:  MOVF   0F,W
020E:  SUBWF  7A,W
020F:  BTFSS  03.2
0210:  GOTO   209
0211:  MOVF   77,W
0212:  MOVWF  21
....................    if(kq>20) set_timer1(1);
0213:  MOVF   21,W
0214:  SUBLW  14
0215:  BTFSC  03.0
0216:  GOTO   21C
0217:  CLRF   0E
0218:  CLRF   0F
0219:  MOVLW  01
021A:  MOVWF  0E
021B:  NOP
....................    lcd_gotoxy(1,1);
021C:  MOVLW  01
021D:  MOVWF  2B
021E:  MOVWF  2C
021F:  CALL   15F
....................    printf(lcd_putc,"SAN PHAM: %02u CAI",kq);
0220:  MOVLW  12
0221:  BSF    03.6
0222:  MOVWF  0D
0223:  MOVLW  00
0224:  MOVWF  0F
0225:  BCF    03.0
0226:  MOVLW  0A
0227:  BCF    03.6
0228:  MOVWF  26
0229:  CALL   19D
022A:  MOVF   21,W
022B:  MOVWF  26
022C:  MOVLW  01
022D:  MOVWF  27
*
0261:  MOVLW  19
0262:  BSF    03.6
0263:  MOVWF  0D
0264:  MOVLW  00
0265:  MOVWF  0F
0266:  BCF    03.0
0267:  MOVLW  04
0268:  BCF    03.6
0269:  MOVWF  26
026A:  CALL   19D
....................    if(input(pin_c3) == 0)
026B:  BSF    20.3
026C:  MOVF   20,W
026D:  BSF    03.5
026E:  MOVWF  07
026F:  BCF    03.5
0270:  BTFSC  07.3
0271:  GOTO   290
....................    {
....................       delay_ms(20);
0272:  MOVLW  14
0273:  MOVWF  2B
0274:  CALL   01C
....................       if(input(pin_c3) == 0)
0275:  BSF    20.3
0276:  MOVF   20,W
0277:  BSF    03.5
0278:  MOVWF  07
0279:  BCF    03.5
027A:  BTFSC  07.3
027B:  GOTO   290
....................       {
....................          ttdem =! ttdem;
027C:  MOVF   22,F
027D:  BTFSC  03.2
027E:  GOTO   281
027F:  MOVLW  00
0280:  GOTO   282
0281:  MOVLW  01
0282:  MOVWF  22
....................          if(ttdem==1) setup_timer_1(t1_external|t1_div_by_1);
0283:  DECFSZ 22,W
0284:  GOTO   288
0285:  MOVLW  07
0286:  MOVWF  10
0287:  GOTO   289
....................          else setup_timer_1(t1_disabled);
0288:  CLRF   10
....................          while(input(pin_c3)==0);
0289:  BSF    20.3
028A:  MOVF   20,W
028B:  BSF    03.5
028C:  MOVWF  07
028D:  BCF    03.5
028E:  BTFSS  07.3
028F:  GOTO   289
....................       }
....................    }
0290:  BCF    0A.3
0291:  BCF    0A.4
0292:  GOTO   393 (RETURN)
.................... }
.................... void main()
*
0355:  MOVF   03,W
0356:  ANDLW  1F
0357:  MOVWF  03
0358:  MOVLW  71
0359:  BSF    03.5
035A:  MOVWF  0F
035B:  CLRF   10
035C:  MOVF   0F,W
035D:  MOVLW  FF
035E:  BCF    03.5
035F:  MOVWF  20
0360:  CLRF   21
0361:  MOVLW  01
0362:  MOVWF  22
0363:  MOVLW  17
0364:  MOVWF  23
0365:  MOVLW  3B
0366:  MOVWF  24
0367:  MOVLW  3B
0368:  MOVWF  25
0369:  BSF    03.5
036A:  BSF    03.6
036B:  MOVF   09,W
036C:  ANDLW  C0
036D:  MOVWF  09
036E:  BCF    03.6
036F:  BCF    1F.4
0370:  BCF    1F.5
0371:  MOVLW  00
0372:  BSF    03.6
0373:  MOVWF  08
0374:  BCF    03.5
0375:  CLRF   07
0376:  CLRF   08
0377:  CLRF   09
0378:  BCF    03.7
.................... {  
....................    set_tris_a(0);
0379:  MOVLW  00
037A:  BSF    03.5
037B:  BCF    03.6
037C:  MOVWF  05
....................    set_tris_b(0xff);
037D:  MOVLW  FF
037E:  MOVWF  06
....................    set_tris_c(0X09);
037F:  MOVLW  09
0380:  MOVWF  07
0381:  BCF    03.5
0382:  MOVWF  20
....................    set_tris_d(0);
0383:  MOVLW  00
0384:  BSF    03.5
0385:  MOVWF  08
....................    set_tris_e(0);
0386:  BCF    09.0
0387:  BCF    09.1
0388:  BCF    09.2
0389:  BCF    09.3
....................    setup_timer_1(t1_external|t1_div_by_1);
038A:  MOVLW  07
038B:  BCF    03.5
038C:  MOVWF  10
....................    set_timer1(0);
038D:  CLRF   0E
038E:  CLRF   0F
038F:  CLRF   0E
0390:  NOP
....................    lcd_init();
0391:  GOTO   109
.................... 
....................    
....................    while(true)
....................    {
....................       demsp();
0392:  GOTO   209
....................       quetled();
0393:  GOTO   293
0394:  GOTO   392
....................    }
.................... }
.................... 
0395:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
