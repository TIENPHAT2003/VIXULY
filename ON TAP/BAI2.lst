CCS PCM C Compiler, Version 5.112, 43599               25-Oct-23 02:48

               Filename:   C:\Users\defaultuser0.LAPTOP-POTNR7PE\OneDrive - hcmute.edu.vn\Desktop\VXL\ON TAP\BAI2.lst

               ROM used:   1494 words (18%)
                           Largest free fragment is 2048
               RAM used:   24 (7%) at main() level
                           49 (13%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   56A
0003:  NOP
.................... #include<16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  EF
0009:  RETLW  DF
000A:  RETLW  BF
000B:  RETLW  7F
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  C0
0011:  RETLW  F9
0012:  RETLW  A4
0013:  RETLW  B0
0014:  RETLW  99
0015:  RETLW  92
0016:  RETLW  82
0017:  RETLW  F8
0018:  RETLW  80
0019:  RETLW  90
001A:  DATA C7,24
001B:  DATA CF,24
001C:  DATA 20,24
001D:  DATA 41,27
001E:  DATA 3A,10
001F:  DATA 25,18
0020:  DATA B2,3A
0021:  DATA 00,00
0022:  DATA D3,20
0023:  DATA 4E,10
0024:  DATA 50,24
0025:  DATA C1,26
0026:  DATA 3A,10
0027:  DATA 25,18
0028:  DATA B2,3A
0029:  DATA A0,21
002A:  DATA C1,24
002B:  DATA 00,00
002C:  DATA CE,20
002D:  DATA CE,23
002E:  DATA A0,29
002F:  DATA D5,20
0030:  DATA 54,1D
0031:  DATA A0,12
0032:  DATA B0,19
0033:  DATA EC,3A
0034:  DATA A0,21
0035:  DATA C1,24
0036:  DATA 80,01
0037:  DATA C7,24
0038:  DATA CF,24
0039:  DATA 20,24
003A:  DATA 41,27
003B:  DATA 3A,10
003C:  DATA 25,18
003D:  DATA B2,3A
003E:  DATA 00,00
*
01C0:  MOVF   0B,W
01C1:  MOVWF  35
01C2:  BCF    0B.7
01C3:  BSF    03.5
01C4:  BSF    03.6
01C5:  BSF    0C.7
01C6:  BSF    0C.0
01C7:  NOP
01C8:  NOP
01C9:  BCF    03.5
01CA:  BCF    03.6
01CB:  BTFSC  35.7
01CC:  BSF    0B.7
01CD:  BTFSC  03.0
01CE:  GOTO   1F7
01CF:  BSF    03.6
01D0:  MOVF   0C,W
01D1:  ANDLW  7F
01D2:  BCF    03.6
01D3:  MOVWF  35
01D4:  BSF    03.6
01D5:  MOVF   0D,W
01D6:  BCF    03.6
01D7:  MOVWF  36
01D8:  BSF    03.6
01D9:  MOVF   0F,W
01DA:  BCF    03.6
01DB:  MOVWF  37
01DC:  MOVF   35,W
01DD:  MOVWF  3F
01DE:  CALL   194
01DF:  MOVF   36,W
01E0:  BSF    03.6
01E1:  MOVWF  0D
01E2:  BCF    03.6
01E3:  MOVF   37,W
01E4:  BSF    03.6
01E5:  MOVWF  0F
01E6:  BCF    03.6
01E7:  MOVF   0B,W
01E8:  MOVWF  38
01E9:  BCF    0B.7
01EA:  BSF    03.5
01EB:  BSF    03.6
01EC:  BSF    0C.7
01ED:  BSF    0C.0
01EE:  NOP
01EF:  NOP
01F0:  BCF    03.5
01F1:  BCF    03.6
01F2:  BTFSC  38.7
01F3:  BSF    0B.7
01F4:  DECFSZ 34,F
01F5:  GOTO   1F7
01F6:  GOTO   216
01F7:  BSF    03.6
01F8:  RLF    0C,W
01F9:  RLF    0E,W
01FA:  ANDLW  7F
01FB:  BCF    03.6
01FC:  MOVWF  35
01FD:  BSF    03.6
01FE:  MOVF   0D,W
01FF:  BCF    03.6
0200:  MOVWF  36
0201:  BSF    03.6
0202:  MOVF   0F,W
0203:  BCF    03.6
0204:  MOVWF  37
0205:  MOVF   35,W
0206:  MOVWF  3F
0207:  CALL   194
0208:  MOVF   36,W
0209:  BSF    03.6
020A:  MOVWF  0D
020B:  BCF    03.6
020C:  MOVF   37,W
020D:  BSF    03.6
020E:  MOVWF  0F
020F:  INCF   0D,F
0210:  BTFSC  03.2
0211:  INCF   0F,F
0212:  BCF    03.0
0213:  BCF    03.6
0214:  DECFSZ 34,F
0215:  GOTO   1C0
0216:  RETURN
0217:  MOVF   37,W
0218:  CLRF   78
0219:  SUBWF  36,W
021A:  BTFSC  03.0
021B:  GOTO   21F
021C:  MOVF   36,W
021D:  MOVWF  77
021E:  GOTO   22B
021F:  CLRF   77
0220:  MOVLW  08
0221:  MOVWF  38
0222:  RLF    36,F
0223:  RLF    77,F
0224:  MOVF   37,W
0225:  SUBWF  77,W
0226:  BTFSC  03.0
0227:  MOVWF  77
0228:  RLF    78,F
0229:  DECFSZ 38,F
022A:  GOTO   222
022B:  RETURN
022C:  MOVF   78,W
022D:  MOVF   34,W
022E:  MOVWF  36
022F:  MOVLW  64
0230:  MOVWF  37
0231:  CALL   217
0232:  MOVF   77,W
0233:  MOVWF  34
0234:  MOVF   78,W
0235:  MOVLW  30
0236:  BTFSS  03.2
0237:  GOTO   23F
0238:  BTFSS  35.1
0239:  GOTO   246
023A:  BTFSC  35.3
023B:  GOTO   246
023C:  BTFSC  35.4
023D:  MOVLW  20
023E:  GOTO   242
023F:  BCF    35.3
0240:  BCF    35.4
0241:  BSF    35.0
0242:  ADDWF  78,F
0243:  MOVF   78,W
0244:  MOVWF  3F
0245:  CALL   194
0246:  MOVF   34,W
0247:  MOVWF  36
0248:  MOVLW  0A
0249:  MOVWF  37
024A:  CALL   217
024B:  MOVF   77,W
024C:  MOVWF  34
024D:  MOVF   78,W
024E:  MOVLW  30
024F:  BTFSS  03.2
0250:  GOTO   257
0251:  BTFSC  35.3
0252:  GOTO   25B
0253:  BTFSS  35.0
0254:  GOTO   25B
0255:  BTFSC  35.4
0256:  MOVLW  20
0257:  ADDWF  78,F
0258:  MOVF   78,W
0259:  MOVWF  3F
025A:  CALL   194
025B:  MOVLW  30
025C:  ADDWF  34,F
025D:  MOVF   34,W
025E:  MOVWF  3F
025F:  CALL   194
0260:  RETURN
0261:  BTFSC  03.1
0262:  GOTO   266
0263:  MOVLW  47
0264:  MOVWF  04
0265:  BCF    03.7
0266:  CLRF   77
0267:  CLRF   78
0268:  CLRF   79
0269:  CLRF   7A
026A:  CLRF   47
026B:  CLRF   48
026C:  CLRF   49
026D:  CLRF   4A
026E:  MOVF   46,W
026F:  IORWF  45,W
0270:  IORWF  44,W
0271:  IORWF  43,W
0272:  BTFSC  03.2
0273:  GOTO   2A4
0274:  MOVLW  20
0275:  MOVWF  4B
0276:  BCF    03.0
0277:  RLF    3F,F
0278:  RLF    40,F
0279:  RLF    41,F
027A:  RLF    42,F
027B:  RLF    47,F
027C:  RLF    48,F
027D:  RLF    49,F
027E:  RLF    4A,F
027F:  MOVF   46,W
0280:  SUBWF  4A,W
0281:  BTFSS  03.2
0282:  GOTO   28D
0283:  MOVF   45,W
0284:  SUBWF  49,W
0285:  BTFSS  03.2
0286:  GOTO   28D
0287:  MOVF   44,W
0288:  SUBWF  48,W
0289:  BTFSS  03.2
028A:  GOTO   28D
028B:  MOVF   43,W
028C:  SUBWF  47,W
028D:  BTFSS  03.0
028E:  GOTO   29E
028F:  MOVF   43,W
0290:  SUBWF  47,F
0291:  MOVF   44,W
0292:  BTFSS  03.0
0293:  INCFSZ 44,W
0294:  SUBWF  48,F
0295:  MOVF   45,W
0296:  BTFSS  03.0
0297:  INCFSZ 45,W
0298:  SUBWF  49,F
0299:  MOVF   46,W
029A:  BTFSS  03.0
029B:  INCFSZ 46,W
029C:  SUBWF  4A,F
029D:  BSF    03.0
029E:  RLF    77,F
029F:  RLF    78,F
02A0:  RLF    79,F
02A1:  RLF    7A,F
02A2:  DECFSZ 4B,F
02A3:  GOTO   276
02A4:  MOVF   47,W
02A5:  MOVWF  00
02A6:  INCF   04,F
02A7:  MOVF   48,W
02A8:  MOVWF  00
02A9:  INCF   04,F
02AA:  MOVF   49,W
02AB:  MOVWF  00
02AC:  INCF   04,F
02AD:  MOVF   4A,W
02AE:  MOVWF  00
02AF:  RETURN
*
02EA:  MOVF   04,W
02EB:  MOVWF  37
02EC:  MOVLW  3B
02ED:  MOVWF  3E
02EE:  MOVLW  9A
02EF:  MOVWF  3D
02F0:  MOVLW  CA
02F1:  MOVWF  3C
02F2:  CLRF   3B
02F3:  MOVLW  0A
02F4:  MOVWF  39
02F5:  BSF    03.1
02F6:  MOVLW  33
02F7:  MOVWF  04
02F8:  BCF    03.7
02F9:  MOVF   36,W
02FA:  MOVWF  42
02FB:  MOVF   35,W
02FC:  MOVWF  41
02FD:  MOVF   34,W
02FE:  MOVWF  40
02FF:  MOVF   33,W
0300:  MOVWF  3F
0301:  MOVF   3E,W
0302:  MOVWF  46
0303:  MOVF   3D,W
0304:  MOVWF  45
0305:  MOVF   3C,W
0306:  MOVWF  44
0307:  MOVF   3B,W
0308:  MOVWF  43
0309:  CALL   261
030A:  MOVF   78,W
030B:  MOVF   77,F
030C:  BTFSS  03.2
030D:  GOTO   321
030E:  MOVF   39,W
030F:  XORLW  01
0310:  BTFSC  03.2
0311:  GOTO   321
0312:  MOVF   37,W
0313:  BTFSC  03.2
0314:  GOTO   322
0315:  ANDLW  0F
0316:  SUBWF  39,W
0317:  BTFSC  03.2
0318:  GOTO   31B
0319:  BTFSC  03.0
031A:  GOTO   327
031B:  BTFSC  37.7
031C:  GOTO   327
031D:  BTFSC  37.6
031E:  GOTO   322
031F:  MOVLW  20
0320:  GOTO   323
0321:  CLRF   37
0322:  MOVLW  30
0323:  ADDWF  77,F
0324:  MOVF   77,W
0325:  MOVWF  3F
0326:  CALL   194
0327:  BCF    03.1
0328:  MOVF   3E,W
0329:  MOVWF  42
032A:  MOVF   3D,W
032B:  MOVWF  41
032C:  MOVF   3C,W
032D:  MOVWF  40
032E:  MOVF   3B,W
032F:  MOVWF  3F
0330:  CLRF   46
0331:  CLRF   45
0332:  CLRF   44
0333:  MOVLW  0A
0334:  MOVWF  43
0335:  CALL   261
0336:  MOVF   7A,W
0337:  MOVWF  3E
0338:  MOVF   79,W
0339:  MOVWF  3D
033A:  MOVF   78,W
033B:  MOVWF  3C
033C:  MOVF   77,W
033D:  MOVWF  3B
033E:  DECFSZ 39,F
033F:  GOTO   2F5
*
04C0:  CLRF   77
04C1:  CLRF   78
04C2:  MOVF   33,W
04C3:  BCF    03.0
04C4:  BTFSC  34.0
04C5:  ADDWF  77,F
04C6:  RRF    77,F
04C7:  RRF    78,F
04C8:  BTFSC  34.1
04C9:  ADDWF  77,F
04CA:  RRF    77,F
04CB:  RRF    78,F
04CC:  BTFSC  34.2
04CD:  ADDWF  77,F
04CE:  RRF    77,F
04CF:  RRF    78,F
04D0:  BTFSC  34.3
04D1:  ADDWF  77,F
04D2:  RRF    77,F
04D3:  RRF    78,F
04D4:  BTFSC  34.4
04D5:  ADDWF  77,F
04D6:  RRF    77,F
04D7:  RRF    78,F
04D8:  BTFSC  34.5
04D9:  ADDWF  77,F
04DA:  RRF    77,F
04DB:  RRF    78,F
04DC:  BTFSC  34.6
04DD:  ADDWF  77,F
04DE:  RRF    77,F
04DF:  RRF    78,F
04E0:  BTFSC  34.7
04E1:  ADDWF  77,F
04E2:  RRF    77,F
04E3:  RRF    78,F
.................... 
.................... #list
.................... 
.................... #fuses intrc_io
.................... #use delay(clock=8M)
*
003F:  MOVLW  40
0040:  MOVWF  04
0041:  BCF    03.7
0042:  MOVF   00,W
0043:  BTFSC  03.2
0044:  GOTO   052
0045:  MOVLW  02
0046:  MOVWF  78
0047:  CLRF   77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  DECFSZ 78,F
004B:  GOTO   047
004C:  MOVLW  97
004D:  MOVWF  77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 00,F
0051:  GOTO   045
0052:  RETURN
.................... 
.................... #define LCD_ENABLE_PIN  PIN_E2                                    
.................... #define LCD_RS_PIN      PIN_E0                                 
.................... #define LCD_RW_PIN      PIN_E1                                  
.................... #define LCD_DATA4       PIN_C4                                 
.................... #define LCD_DATA5       PIN_c5                                   
.................... #define LCD_DATA6       PIN_c6                                    
.................... #define LCD_DATA7       PIN_c7
.................... #include<tvkey4x4.c>
.................... unsigned int8 key_4x4()
*
042B:  MOVLW  FF
042C:  MOVWF  33
.................... {
....................       const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................       unsigned int8 mp=0xff,cot;
....................       for(cot=0;cot<4;cot++)
042D:  CLRF   34
042E:  MOVF   34,W
042F:  SUBLW  03
0430:  BTFSS  03.0
0431:  GOTO   471
....................       {
....................             output_b(mq[cot]);
0432:  MOVF   34,W
0433:  CALL   004
0434:  MOVWF  35
0435:  BSF    03.5
0436:  CLRF   06
0437:  BCF    03.5
0438:  MOVF   35,W
0439:  MOVWF  06
....................             while(input(pin_b0)==0) mp= cot*4 + 0;
043A:  BSF    03.5
043B:  BSF    06.0
043C:  BCF    03.5
043D:  BTFSC  06.0
043E:  GOTO   445
043F:  RLF    34,W
0440:  MOVWF  33
0441:  RLF    33,F
0442:  MOVLW  FC
0443:  ANDWF  33,F
0444:  GOTO   43A
....................             while(input(pin_b1)==0) mp= cot*4 + 1;
0445:  BSF    03.5
0446:  BSF    06.1
0447:  BCF    03.5
0448:  BTFSC  06.1
0449:  GOTO   453
044A:  RLF    34,W
044B:  MOVWF  77
044C:  RLF    77,F
044D:  MOVLW  FC
044E:  ANDWF  77,F
044F:  MOVF   77,W
0450:  ADDLW  01
0451:  MOVWF  33
0452:  GOTO   445
....................             while(input(pin_b2)==0) mp= cot*4 + 2;
0453:  BSF    03.5
0454:  BSF    06.2
0455:  BCF    03.5
0456:  BTFSC  06.2
0457:  GOTO   461
0458:  RLF    34,W
0459:  MOVWF  77
045A:  RLF    77,F
045B:  MOVLW  FC
045C:  ANDWF  77,F
045D:  MOVF   77,W
045E:  ADDLW  02
045F:  MOVWF  33
0460:  GOTO   453
....................             while(input(pin_b3)==0) mp= cot*4 + 3;
0461:  BSF    03.5
0462:  BSF    06.3
0463:  BCF    03.5
0464:  BTFSC  06.3
0465:  GOTO   46F
0466:  RLF    34,W
0467:  MOVWF  77
0468:  RLF    77,F
0469:  MOVLW  FC
046A:  ANDWF  77,F
046B:  MOVF   77,W
046C:  ADDLW  03
046D:  MOVWF  33
046E:  GOTO   461
046F:  INCF   34,F
0470:  GOTO   42E
....................       }
....................       return mp;
0471:  MOVF   33,W
0472:  MOVWF  78
.................... }
.................... 
.................... #include<LCD.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00C8:  BSF    07.4
....................    output_float(LCD_DATA5);
00C9:  BSF    07.5
....................    output_float(LCD_DATA6);
00CA:  BSF    07.6
....................    output_float(LCD_DATA7);
00CB:  BSF    07.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00CC:  BCF    03.5
00CD:  BSF    09.1
00CE:  BSF    03.5
00CF:  BCF    09.1
....................    delay_cycles(1);
00D0:  NOP
....................    lcd_output_enable(1);
00D1:  BCF    03.5
00D2:  BSF    09.2
00D3:  BSF    03.5
00D4:  BCF    09.2
....................    delay_cycles(1);
00D5:  NOP
....................    high = lcd_read_nibble();
00D6:  BCF    03.5
00D7:  CALL   087
00D8:  MOVF   78,W
00D9:  MOVWF  47
....................       
....................    lcd_output_enable(0);
00DA:  BCF    09.2
00DB:  BSF    03.5
00DC:  BCF    09.2
....................    delay_cycles(1);
00DD:  NOP
....................    lcd_output_enable(1);
00DE:  BCF    03.5
00DF:  BSF    09.2
00E0:  BSF    03.5
00E1:  BCF    09.2
....................    delay_us(1);
00E2:  GOTO   0E3
....................    low = lcd_read_nibble();
00E3:  BCF    03.5
00E4:  CALL   087
00E5:  MOVF   78,W
00E6:  MOVWF  46
....................       
....................    lcd_output_enable(0);
00E7:  BCF    09.2
00E8:  BSF    03.5
00E9:  BCF    09.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00EA:  BCF    03.5
00EB:  BCF    20.4
00EC:  MOVF   20,W
00ED:  BSF    03.5
00EE:  MOVWF  07
....................    output_drive(LCD_DATA5);
00EF:  BCF    03.5
00F0:  BCF    20.5
00F1:  MOVF   20,W
00F2:  BSF    03.5
00F3:  MOVWF  07
....................    output_drive(LCD_DATA6);
00F4:  BCF    03.5
00F5:  BCF    20.6
00F6:  MOVF   20,W
00F7:  BSF    03.5
00F8:  MOVWF  07
....................    output_drive(LCD_DATA7);
00F9:  BCF    03.5
00FA:  BCF    20.7
00FB:  MOVF   20,W
00FC:  BSF    03.5
00FD:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00FE:  BCF    03.5
00FF:  SWAPF  47,W
0100:  MOVWF  77
0101:  MOVLW  F0
0102:  ANDWF  77,F
0103:  MOVF   77,W
0104:  IORWF  46,W
0105:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0087:  CLRF   48
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0088:  BSF    20.4
0089:  MOVF   20,W
008A:  BSF    03.5
008B:  MOVWF  07
008C:  MOVLW  00
008D:  BCF    03.5
008E:  BTFSC  07.4
008F:  MOVLW  01
0090:  IORWF  48,F
....................    n |= input(LCD_DATA5) << 1;
0091:  BSF    20.5
0092:  MOVF   20,W
0093:  BSF    03.5
0094:  MOVWF  07
0095:  MOVLW  00
0096:  BCF    03.5
0097:  BTFSC  07.5
0098:  MOVLW  01
0099:  MOVWF  77
009A:  BCF    03.0
009B:  RLF    77,F
009C:  MOVF   77,W
009D:  IORWF  48,F
....................    n |= input(LCD_DATA6) << 2;
009E:  BSF    20.6
009F:  MOVF   20,W
00A0:  BSF    03.5
00A1:  MOVWF  07
00A2:  MOVLW  00
00A3:  BCF    03.5
00A4:  BTFSC  07.6
00A5:  MOVLW  01
00A6:  MOVWF  77
00A7:  RLF    77,F
00A8:  RLF    77,F
00A9:  MOVLW  FC
00AA:  ANDWF  77,F
00AB:  MOVF   77,W
00AC:  IORWF  48,F
....................    n |= input(LCD_DATA7) << 3;
00AD:  BSF    20.7
00AE:  MOVF   20,W
00AF:  BSF    03.5
00B0:  MOVWF  07
00B1:  MOVLW  00
00B2:  BCF    03.5
00B3:  BTFSC  07.7
00B4:  MOVLW  01
00B5:  MOVWF  77
00B6:  RLF    77,F
00B7:  RLF    77,F
00B8:  RLF    77,F
00B9:  MOVLW  F8
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  48,F
....................    
....................    return(n);
00BD:  MOVF   48,W
00BE:  MOVWF  78
....................   #else
00BF:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0053:  BTFSC  47.0
0054:  GOTO   057
0055:  BCF    07.4
0056:  GOTO   058
0057:  BSF    07.4
0058:  BCF    20.4
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
....................    output_bit(LCD_DATA5, bit_test(n, 1));
005C:  BCF    03.5
005D:  BTFSC  47.1
005E:  GOTO   061
005F:  BCF    07.5
0060:  GOTO   062
0061:  BSF    07.5
0062:  BCF    20.5
0063:  MOVF   20,W
0064:  BSF    03.5
0065:  MOVWF  07
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0066:  BCF    03.5
0067:  BTFSC  47.2
0068:  GOTO   06B
0069:  BCF    07.6
006A:  GOTO   06C
006B:  BSF    07.6
006C:  BCF    20.6
006D:  MOVF   20,W
006E:  BSF    03.5
006F:  MOVWF  07
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0070:  BCF    03.5
0071:  BTFSC  47.3
0072:  GOTO   075
0073:  BCF    07.7
0074:  GOTO   076
0075:  BSF    07.7
0076:  BCF    20.7
0077:  MOVF   20,W
0078:  BSF    03.5
0079:  MOVWF  07
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
007A:  NOP
....................    lcd_output_enable(1);
007B:  BCF    03.5
007C:  BSF    09.2
007D:  BSF    03.5
007E:  BCF    09.2
....................    delay_us(2);
007F:  GOTO   080
0080:  GOTO   081
....................    lcd_output_enable(0);
0081:  BCF    03.5
0082:  BCF    09.2
0083:  BSF    03.5
0084:  BCF    09.2
0085:  BCF    03.5
0086:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
00C0:  BSF    03.5
00C1:  BCF    09.2
....................    lcd_rs_tris();
00C2:  BCF    09.0
....................    lcd_rw_tris();
00C3:  BCF    09.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
00C4:  BCF    03.5
00C5:  BCF    09.0
00C6:  BSF    03.5
00C7:  BCF    09.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0106:  MOVF   78,W
0107:  MOVWF  46
0108:  BTFSS  46.7
0109:  GOTO   10C
010A:  BSF    03.5
010B:  GOTO   0C8
....................    lcd_output_rs(address);
010C:  MOVF   44,F
010D:  BTFSS  03.2
010E:  GOTO   111
010F:  BCF    09.0
0110:  GOTO   112
0111:  BSF    09.0
0112:  BSF    03.5
0113:  BCF    09.0
....................    delay_cycles(1);
0114:  NOP
....................    lcd_output_rw(0);
0115:  BCF    03.5
0116:  BCF    09.1
0117:  BSF    03.5
0118:  BCF    09.1
....................    delay_cycles(1);
0119:  NOP
....................    lcd_output_enable(0);
011A:  BCF    03.5
011B:  BCF    09.2
011C:  BSF    03.5
011D:  BCF    09.2
....................    lcd_send_nibble(n >> 4);
011E:  BCF    03.5
011F:  SWAPF  45,W
0120:  MOVWF  46
0121:  MOVLW  0F
0122:  ANDWF  46,F
0123:  MOVF   46,W
0124:  MOVWF  47
0125:  CALL   053
....................    lcd_send_nibble(n & 0xf);
0126:  MOVF   45,W
0127:  ANDLW  0F
0128:  MOVWF  46
0129:  MOVWF  47
012A:  CALL   053
012B:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
012C:  MOVLW  28
012D:  MOVWF  34
012E:  MOVLW  0C
012F:  MOVWF  35
0130:  MOVLW  01
0131:  MOVWF  36
0132:  MOVLW  06
0133:  MOVWF  37
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0134:  BCF    09.2
0135:  BSF    03.5
0136:  BCF    09.2
....................    lcd_output_rs(0);
0137:  BCF    03.5
0138:  BCF    09.0
0139:  BSF    03.5
013A:  BCF    09.0
....................    lcd_output_rw(0);
013B:  BCF    03.5
013C:  BCF    09.1
013D:  BSF    03.5
013E:  BCF    09.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
013F:  BCF    03.5
0140:  BCF    20.4
0141:  MOVF   20,W
0142:  BSF    03.5
0143:  MOVWF  07
....................    output_drive(LCD_DATA5);
0144:  BCF    03.5
0145:  BCF    20.5
0146:  MOVF   20,W
0147:  BSF    03.5
0148:  MOVWF  07
....................    output_drive(LCD_DATA6);
0149:  BCF    03.5
014A:  BCF    20.6
014B:  MOVF   20,W
014C:  BSF    03.5
014D:  MOVWF  07
....................    output_drive(LCD_DATA7);
014E:  BCF    03.5
014F:  BCF    20.7
0150:  MOVF   20,W
0151:  BSF    03.5
0152:  MOVWF  07
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0153:  BCF    09.2
....................    lcd_rs_tris();
0154:  BCF    09.0
....................    lcd_rw_tris();
0155:  BCF    09.1
....................  #endif
....................     
....................    delay_ms(15);
0156:  MOVLW  0F
0157:  BCF    03.5
0158:  MOVWF  40
0159:  CALL   03F
....................    for(i=1;i<=3;++i)
015A:  MOVLW  01
015B:  MOVWF  33
015C:  MOVF   33,W
015D:  SUBLW  03
015E:  BTFSS  03.0
015F:  GOTO   168
....................    {
....................        lcd_send_nibble(3);
0160:  MOVLW  03
0161:  MOVWF  47
0162:  CALL   053
....................        delay_ms(5);
0163:  MOVLW  05
0164:  MOVWF  40
0165:  CALL   03F
0166:  INCF   33,F
0167:  GOTO   15C
....................    }
....................    
....................    lcd_send_nibble(2);
0168:  MOVLW  02
0169:  MOVWF  47
016A:  CALL   053
....................    delay_ms(5);
016B:  MOVLW  05
016C:  MOVWF  40
016D:  CALL   03F
....................    for(i=0;i<=3;++i)
016E:  CLRF   33
016F:  MOVF   33,W
0170:  SUBLW  03
0171:  BTFSS  03.0
0172:  GOTO   17F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0173:  MOVLW  34
0174:  ADDWF  33,W
0175:  MOVWF  04
0176:  BCF    03.7
0177:  MOVF   00,W
0178:  MOVWF  38
0179:  CLRF   44
017A:  MOVF   38,W
017B:  MOVWF  45
017C:  CALL   0C0
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
017D:  INCF   33,F
017E:  GOTO   16F
017F:  BCF    0A.3
0180:  BCF    0A.4
0181:  GOTO   5B9 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0182:  DECFSZ 41,W
0183:  GOTO   185
0184:  GOTO   188
....................       address=LCD_LINE_TWO;
0185:  MOVLW  40
0186:  MOVWF  42
0187:  GOTO   189
....................    else
....................       address=0;
0188:  CLRF   42
....................      
....................    address+=x-1;
0189:  MOVLW  01
018A:  SUBWF  40,W
018B:  ADDWF  42,F
....................    lcd_send_byte(0,0x80|address);
018C:  MOVF   42,W
018D:  IORLW  80
018E:  MOVWF  43
018F:  CLRF   44
0190:  MOVF   43,W
0191:  MOVWF  45
0192:  CALL   0C0
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0193:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0194:  MOVF   3F,W
0195:  XORLW  07
0196:  BTFSC  03.2
0197:  GOTO   1A2
0198:  XORLW  0B
0199:  BTFSC  03.2
019A:  GOTO   1A7
019B:  XORLW  06
019C:  BTFSC  03.2
019D:  GOTO   1AF
019E:  XORLW  02
019F:  BTFSC  03.2
01A0:  GOTO   1B5
01A1:  GOTO   1BA
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01A2:  MOVLW  01
01A3:  MOVWF  40
01A4:  MOVWF  41
01A5:  CALL   182
01A6:  GOTO   1BF
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01A7:  CLRF   44
01A8:  MOVLW  01
01A9:  MOVWF  45
01AA:  CALL   0C0
....................                      delay_ms(2);
01AB:  MOVLW  02
01AC:  MOVWF  40
01AD:  CALL   03F
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01AE:  GOTO   1BF
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01AF:  MOVLW  01
01B0:  MOVWF  40
01B1:  MOVLW  02
01B2:  MOVWF  41
01B3:  CALL   182
01B4:  GOTO   1BF
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
01B5:  CLRF   44
01B6:  MOVLW  10
01B7:  MOVWF  45
01B8:  CALL   0C0
01B9:  GOTO   1BF
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
01BA:  MOVLW  01
01BB:  MOVWF  44
01BC:  MOVF   3F,W
01BD:  MOVWF  45
01BE:  CALL   0C0
....................      #endif
....................    }
01BF:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #bit t0if=0x0b.2
.................... const unsigned int8 ma7doan[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
.................... unsigned int8 kq=0, ttdem =1, gio=0,phut=0,giay=50;
.................... unsigned int8 mp,dem,flag=0,gioihan=20,bdn=0;
.................... unsigned int32 ns=0, tong=0;
.................... void matranphim()
.................... {
....................    mp=key_4x4();
*
0473:  MOVF   78,W
0474:  MOVWF  26
....................    if(mp==0){
0475:  MOVF   26,F
0476:  BTFSS  03.2
0477:  GOTO   47A
....................       dem = 0;
0478:  CLRF   27
....................       flag++;
0479:  INCF   28,F
....................    }
....................    if(mp==1){
047A:  DECFSZ 26,W
047B:  GOTO   47F
....................       dem = 1;
047C:  MOVLW  01
047D:  MOVWF  27
....................       flag++;
047E:  INCF   28,F
....................    }
....................    if(mp==2){
047F:  MOVF   26,W
0480:  SUBLW  02
0481:  BTFSS  03.2
0482:  GOTO   486
....................       dem = 2;
0483:  MOVLW  02
0484:  MOVWF  27
....................       flag++;
0485:  INCF   28,F
....................    }
....................    if(mp==3){
0486:  MOVF   26,W
0487:  SUBLW  03
0488:  BTFSS  03.2
0489:  GOTO   48D
....................       dem = 3;
048A:  MOVLW  03
048B:  MOVWF  27
....................       flag++;
048C:  INCF   28,F
....................    }
....................    if(mp==4){
048D:  MOVF   26,W
048E:  SUBLW  04
048F:  BTFSS  03.2
0490:  GOTO   494
....................       dem = 4;
0491:  MOVLW  04
0492:  MOVWF  27
....................       flag++;
0493:  INCF   28,F
....................    }
....................    if(mp==5){
0494:  MOVF   26,W
0495:  SUBLW  05
0496:  BTFSS  03.2
0497:  GOTO   49B
....................       dem = 5;
0498:  MOVLW  05
0499:  MOVWF  27
....................       flag++;
049A:  INCF   28,F
....................    }
....................    if(mp==6){
049B:  MOVF   26,W
049C:  SUBLW  06
049D:  BTFSS  03.2
049E:  GOTO   4A2
....................       dem = 6;
049F:  MOVLW  06
04A0:  MOVWF  27
....................       flag++;
04A1:  INCF   28,F
....................    }
....................    if(mp==7){
04A2:  MOVF   26,W
04A3:  SUBLW  07
04A4:  BTFSS  03.2
04A5:  GOTO   4A9
....................       dem = 7;
04A6:  MOVLW  07
04A7:  MOVWF  27
....................       flag++;
04A8:  INCF   28,F
....................    }
....................    if(mp==8){
04A9:  MOVF   26,W
04AA:  SUBLW  08
04AB:  BTFSS  03.2
04AC:  GOTO   4B0
....................       dem = 8;
04AD:  MOVLW  08
04AE:  MOVWF  27
....................       flag++;
04AF:  INCF   28,F
....................    }
....................    if(mp==9){
04B0:  MOVF   26,W
04B1:  SUBLW  09
04B2:  BTFSS  03.2
04B3:  GOTO   4B7
....................       dem = 9;
04B4:  MOVLW  09
04B5:  MOVWF  27
....................       flag++;
04B6:  INCF   28,F
....................    }
04B7:  BCF    0A.3
04B8:  BCF    0A.4
04B9:  GOTO   5D0 (RETURN)
.................... }
.................... void datgioihan()
.................... {
....................    if(flag==1){
04BA:  DECFSZ 28,W
04BB:  GOTO   4E6
....................       gioihan=dem*10;
04BC:  MOVF   27,W
04BD:  MOVWF  33
04BE:  MOVLW  0A
04BF:  MOVWF  34
*
04E4:  MOVF   78,W
04E5:  MOVWF  29
....................    }
....................    if(flag==2){
04E6:  MOVF   28,W
04E7:  SUBLW  02
04E8:  BTFSS  03.2
04E9:  GOTO   501
....................       gioihan=gioihan+dem;
04EA:  MOVF   27,W
04EB:  ADDWF  29,F
....................       flag=0;
04EC:  CLRF   28
....................       lcd_gotoxy(1,2);
04ED:  MOVLW  01
04EE:  MOVWF  40
04EF:  MOVLW  02
04F0:  MOVWF  41
04F1:  CALL   182
....................       printf(lcd_putc,"GIOI HAN: %02u", gioihan);
04F2:  MOVLW  1A
04F3:  BSF    03.6
04F4:  MOVWF  0D
04F5:  MOVLW  00
04F6:  MOVWF  0F
04F7:  BCF    03.0
04F8:  MOVLW  0A
04F9:  BCF    03.6
04FA:  MOVWF  34
04FB:  CALL   1C0
04FC:  MOVF   29,W
04FD:  MOVWF  34
04FE:  MOVLW  01
04FF:  MOVWF  35
0500:  CALL   22C
....................    }
0501:  BCF    0A.3
0502:  BCF    0A.4
0503:  GOTO   5D1 (RETURN)
....................    
.................... }
.................... void quetled()
.................... {  
....................    if(t0if==1){
*
034D:  BTFSS  0B.2
034E:  GOTO   369
....................       set_timer0(100);
034F:  MOVLW  64
0350:  MOVWF  01
....................       bdn++;
0351:  INCF   2A,F
....................       t0if=0;
0352:  BCF    0B.2
....................       if(bdn==50)
0353:  MOVF   2A,W
0354:  SUBLW  32
0355:  BTFSS  03.2
0356:  GOTO   369
....................       {
....................          bdn=0;
0357:  CLRF   2A
....................          giay++;
0358:  INCF   25,F
....................          if(giay>59){
0359:  MOVF   25,W
035A:  SUBLW  3B
035B:  BTFSC  03.0
035C:  GOTO   369
....................             phut++;
035D:  INCF   24,F
....................             giay=0;
035E:  CLRF   25
....................             if(phut>59){
035F:  MOVF   24,W
0360:  SUBLW  3B
0361:  BTFSC  03.0
0362:  GOTO   369
....................                phut=0;
0363:  CLRF   24
....................                gio++;
0364:  INCF   23,F
....................                if(gio>23){
0365:  MOVF   23,W
0366:  SUBLW  17
0367:  BTFSS  03.0
....................                   gio=0;
0368:  CLRF   23
....................                }
....................             }
....................          }
....................       }
....................    }
....................    output_a(ma7doan[gio/10%10]); output_low(pin_d0); delay_ms(1); output_high(pin_d0);
0369:  MOVF   23,W
036A:  MOVWF  36
036B:  MOVLW  0A
036C:  MOVWF  37
036D:  CALL   217
036E:  MOVF   78,W
036F:  MOVWF  36
0370:  MOVLW  0A
0371:  MOVWF  37
0372:  CALL   217
0373:  MOVF   77,W
0374:  CALL   00C
0375:  MOVWF  33
0376:  BSF    03.5
0377:  CLRF   05
0378:  BCF    03.5
0379:  MOVF   33,W
037A:  MOVWF  05
037B:  BSF    03.5
037C:  BCF    08.0
037D:  BCF    03.5
037E:  BCF    08.0
037F:  MOVLW  01
0380:  MOVWF  40
0381:  CALL   03F
0382:  BSF    03.5
0383:  BCF    08.0
0384:  BCF    03.5
0385:  BSF    08.0
....................    output_a(ma7doan[gio/1%10]); output_low(pin_d1); delay_ms(1); output_high(pin_d1);
0386:  MOVF   23,W
0387:  MOVWF  36
0388:  MOVLW  0A
0389:  MOVWF  37
038A:  CALL   217
038B:  MOVF   77,W
038C:  CALL   00C
038D:  MOVWF  33
038E:  BSF    03.5
038F:  CLRF   05
0390:  BCF    03.5
0391:  MOVF   33,W
0392:  MOVWF  05
0393:  BSF    03.5
0394:  BCF    08.1
0395:  BCF    03.5
0396:  BCF    08.1
0397:  MOVLW  01
0398:  MOVWF  40
0399:  CALL   03F
039A:  BSF    03.5
039B:  BCF    08.1
039C:  BCF    03.5
039D:  BSF    08.1
....................    output_a(ma7doan[phut/10%10]); output_low(pin_d3); delay_ms(1); output_high(pin_d3);
039E:  MOVF   24,W
039F:  MOVWF  36
03A0:  MOVLW  0A
03A1:  MOVWF  37
03A2:  CALL   217
03A3:  MOVF   78,W
03A4:  MOVWF  36
03A5:  MOVLW  0A
03A6:  MOVWF  37
03A7:  CALL   217
03A8:  MOVF   77,W
03A9:  CALL   00C
03AA:  MOVWF  33
03AB:  BSF    03.5
03AC:  CLRF   05
03AD:  BCF    03.5
03AE:  MOVF   33,W
03AF:  MOVWF  05
03B0:  BSF    03.5
03B1:  BCF    08.3
03B2:  BCF    03.5
03B3:  BCF    08.3
03B4:  MOVLW  01
03B5:  MOVWF  40
03B6:  CALL   03F
03B7:  BSF    03.5
03B8:  BCF    08.3
03B9:  BCF    03.5
03BA:  BSF    08.3
....................    output_a(ma7doan[phut/1%10]); output_low(pin_d4); delay_ms(1); output_high(pin_d4);
03BB:  MOVF   24,W
03BC:  MOVWF  36
03BD:  MOVLW  0A
03BE:  MOVWF  37
03BF:  CALL   217
03C0:  MOVF   77,W
03C1:  CALL   00C
03C2:  MOVWF  33
03C3:  BSF    03.5
03C4:  CLRF   05
03C5:  BCF    03.5
03C6:  MOVF   33,W
03C7:  MOVWF  05
03C8:  BSF    03.5
03C9:  BCF    08.4
03CA:  BCF    03.5
03CB:  BCF    08.4
03CC:  MOVLW  01
03CD:  MOVWF  40
03CE:  CALL   03F
03CF:  BSF    03.5
03D0:  BCF    08.4
03D1:  BCF    03.5
03D2:  BSF    08.4
....................    output_a(ma7doan[giay/10%10]); output_low(pin_d6); delay_ms(1); output_high(pin_d6);
03D3:  MOVF   25,W
03D4:  MOVWF  36
03D5:  MOVLW  0A
03D6:  MOVWF  37
03D7:  CALL   217
03D8:  MOVF   78,W
03D9:  MOVWF  36
03DA:  MOVLW  0A
03DB:  MOVWF  37
03DC:  CALL   217
03DD:  MOVF   77,W
03DE:  CALL   00C
03DF:  MOVWF  33
03E0:  BSF    03.5
03E1:  CLRF   05
03E2:  BCF    03.5
03E3:  MOVF   33,W
03E4:  MOVWF  05
03E5:  BSF    03.5
03E6:  BCF    08.6
03E7:  BCF    03.5
03E8:  BCF    08.6
03E9:  MOVLW  01
03EA:  MOVWF  40
03EB:  CALL   03F
03EC:  BSF    03.5
03ED:  BCF    08.6
03EE:  BCF    03.5
03EF:  BSF    08.6
....................    output_a(ma7doan[giay/1%10]); output_low(pin_d7); delay_ms(1); output_high(pin_d7);
03F0:  MOVF   25,W
03F1:  MOVWF  36
03F2:  MOVLW  0A
03F3:  MOVWF  37
03F4:  CALL   217
03F5:  MOVF   77,W
03F6:  CALL   00C
03F7:  MOVWF  33
03F8:  BSF    03.5
03F9:  CLRF   05
03FA:  BCF    03.5
03FB:  MOVF   33,W
03FC:  MOVWF  05
03FD:  BSF    03.5
03FE:  BCF    08.7
03FF:  BCF    03.5
0400:  BCF    08.7
0401:  MOVLW  01
0402:  MOVWF  40
0403:  CALL   03F
0404:  BSF    03.5
0405:  BCF    08.7
0406:  BCF    03.5
0407:  BSF    08.7
....................    output_a(0xbf); output_low(pin_d2); delay_ms(1); output_high(pin_d2);
0408:  BSF    03.5
0409:  CLRF   05
040A:  MOVLW  BF
040B:  BCF    03.5
040C:  MOVWF  05
040D:  BSF    03.5
040E:  BCF    08.2
040F:  BCF    03.5
0410:  BCF    08.2
0411:  MOVLW  01
0412:  MOVWF  40
0413:  CALL   03F
0414:  BSF    03.5
0415:  BCF    08.2
0416:  BCF    03.5
0417:  BSF    08.2
....................    output_a(0xbf); output_low(pin_d5); delay_ms(1); output_high(pin_d5);
0418:  BSF    03.5
0419:  CLRF   05
041A:  MOVLW  BF
041B:  BCF    03.5
041C:  MOVWF  05
041D:  BSF    03.5
041E:  BCF    08.5
041F:  BCF    03.5
0420:  BCF    08.5
0421:  MOVLW  01
0422:  MOVWF  40
0423:  CALL   03F
0424:  BSF    03.5
0425:  BCF    08.5
0426:  BCF    03.5
0427:  BSF    08.5
0428:  BCF    0A.3
0429:  BCF    0A.4
042A:  GOTO   5CF (RETURN)
.................... }
.................... void demsp(unsigned int8 datgioihan)
.................... {
....................    kq=get_timer1();
*
0504:  MOVF   0F,W
0505:  MOVWF  7A
0506:  MOVF   0E,W
0507:  MOVWF  77
0508:  MOVF   0F,W
0509:  SUBWF  7A,W
050A:  BTFSS  03.2
050B:  GOTO   504
050C:  MOVF   77,W
050D:  MOVWF  21
....................    if(kq>datgioihan){
050E:  MOVF   21,W
050F:  SUBWF  33,W
0510:  BTFSC  03.0
0511:  GOTO   525
....................       set_timer1(1);
0512:  CLRF   0E
0513:  CLRF   0F
0514:  MOVLW  01
0515:  MOVWF  0E
0516:  NOP
....................       tong+=datgioihan;
0517:  MOVF   33,W
0518:  ADDWF  2F,F
0519:  MOVLW  00
051A:  BTFSC  03.0
051B:  MOVLW  01
051C:  ADDWF  30,F
051D:  MOVLW  00
051E:  BTFSC  03.0
051F:  MOVLW  01
0520:  ADDWF  31,F
0521:  MOVLW  00
0522:  BTFSC  03.0
0523:  MOVLW  01
0524:  ADDWF  32,F
....................    }
....................    lcd_gotoxy(1,1);
0525:  MOVLW  01
0526:  MOVWF  40
0527:  MOVWF  41
0528:  CALL   182
....................    printf(lcd_putc,"SAN PHAM: %02u CAI",kq);
0529:  MOVLW  22
052A:  BSF    03.6
052B:  MOVWF  0D
052C:  MOVLW  00
052D:  MOVWF  0F
052E:  BCF    03.0
052F:  MOVLW  0A
0530:  BCF    03.6
0531:  MOVWF  34
0532:  CALL   1C0
0533:  MOVF   21,W
0534:  MOVWF  34
0535:  MOVLW  01
0536:  MOVWF  35
0537:  CALL   22C
0538:  MOVLW  29
0539:  BSF    03.6
053A:  MOVWF  0D
053B:  MOVLW  00
053C:  MOVWF  0F
053D:  BCF    03.0
053E:  MOVLW  04
053F:  BCF    03.6
0540:  MOVWF  34
0541:  CALL   1C0
....................    if(input(pin_c3) == 0)
0542:  BSF    20.3
0543:  MOVF   20,W
0544:  BSF    03.5
0545:  MOVWF  07
0546:  BCF    03.5
0547:  BTFSC  07.3
0548:  GOTO   567
....................    {
....................       delay_ms(20);
0549:  MOVLW  14
054A:  MOVWF  40
054B:  CALL   03F
....................       if(input(pin_c3) == 0)
054C:  BSF    20.3
054D:  MOVF   20,W
054E:  BSF    03.5
054F:  MOVWF  07
0550:  BCF    03.5
0551:  BTFSC  07.3
0552:  GOTO   567
....................       {
....................          ttdem =! ttdem;
0553:  MOVF   22,F
0554:  BTFSC  03.2
0555:  GOTO   558
0556:  MOVLW  00
0557:  GOTO   559
0558:  MOVLW  01
0559:  MOVWF  22
....................          if(ttdem==1) setup_timer_1(t1_external|t1_div_by_1);
055A:  DECFSZ 22,W
055B:  GOTO   55F
055C:  MOVLW  07
055D:  MOVWF  10
055E:  GOTO   560
....................          else setup_timer_1(t1_disabled);
055F:  CLRF   10
....................          while(input(pin_c3)==0);
0560:  BSF    20.3
0561:  MOVF   20,W
0562:  BSF    03.5
0563:  MOVWF  07
0564:  BCF    03.5
0565:  BTFSS  07.3
0566:  GOTO   560
....................       }
....................    }
0567:  BCF    0A.3
0568:  BCF    0A.4
0569:  GOTO   5D4 (RETURN)
.................... }
.................... void nangsuat()
.................... {
....................    if(giay==59){
*
02B0:  MOVF   25,W
02B1:  SUBLW  3B
02B2:  BTFSS  03.2
02B3:  GOTO   2D1
....................       ns=(tong+kq)/1;
02B4:  MOVF   21,W
02B5:  ADDWF  2F,W
02B6:  MOVWF  33
02B7:  MOVF   30,W
02B8:  MOVWF  34
02B9:  MOVLW  00
02BA:  BTFSC  03.0
02BB:  MOVLW  01
02BC:  ADDWF  34,F
02BD:  MOVF   31,W
02BE:  MOVWF  35
02BF:  MOVLW  00
02C0:  BTFSC  03.0
02C1:  MOVLW  01
02C2:  ADDWF  35,F
02C3:  MOVF   32,W
02C4:  MOVWF  36
02C5:  MOVLW  00
02C6:  BTFSC  03.0
02C7:  MOVLW  01
02C8:  ADDWF  36,F
02C9:  MOVF   36,W
02CA:  MOVWF  2E
02CB:  MOVF   35,W
02CC:  MOVWF  2D
02CD:  MOVF   34,W
02CE:  MOVWF  2C
02CF:  MOVF   33,W
02D0:  MOVWF  2B
....................    }
....................    lcd_gotoxy(21,1);
02D1:  MOVLW  15
02D2:  MOVWF  40
02D3:  MOVLW  01
02D4:  MOVWF  41
02D5:  CALL   182
....................    printf(lcd_putc,"NANG SUAT: %03lu CAI",ns);
02D6:  MOVLW  2C
02D7:  BSF    03.6
02D8:  MOVWF  0D
02D9:  MOVLW  00
02DA:  MOVWF  0F
02DB:  BCF    03.0
02DC:  MOVLW  0B
02DD:  BCF    03.6
02DE:  MOVWF  34
02DF:  CALL   1C0
02E0:  MOVLW  43
02E1:  MOVWF  04
02E2:  MOVF   2E,W
02E3:  MOVWF  36
02E4:  MOVF   2D,W
02E5:  MOVWF  35
02E6:  MOVF   2C,W
02E7:  MOVWF  34
02E8:  MOVF   2B,W
02E9:  MOVWF  33
*
0340:  MOVLW  34
0341:  BSF    03.6
0342:  MOVWF  0D
0343:  MOVLW  00
0344:  MOVWF  0F
0345:  BCF    03.0
0346:  MOVLW  04
0347:  BCF    03.6
0348:  MOVWF  34
0349:  CALL   1C0
034A:  BCF    0A.3
034B:  BCF    0A.4
034C:  GOTO   5CE (RETURN)
.................... }
.................... void main()
*
056A:  MOVF   03,W
056B:  ANDLW  1F
056C:  MOVWF  03
056D:  MOVLW  71
056E:  BSF    03.5
056F:  MOVWF  0F
0570:  CLRF   10
0571:  MOVF   0F,W
0572:  MOVLW  FF
0573:  BCF    03.5
0574:  MOVWF  20
0575:  CLRF   21
0576:  MOVLW  01
0577:  MOVWF  22
0578:  CLRF   23
0579:  CLRF   24
057A:  MOVLW  32
057B:  MOVWF  25
057C:  CLRF   28
057D:  MOVLW  14
057E:  MOVWF  29
057F:  CLRF   2A
0580:  CLRF   2E
0581:  CLRF   2D
0582:  CLRF   2C
0583:  CLRF   2B
0584:  CLRF   32
0585:  CLRF   31
0586:  CLRF   30
0587:  CLRF   2F
0588:  BSF    03.5
0589:  BSF    03.6
058A:  MOVF   09,W
058B:  ANDLW  C0
058C:  MOVWF  09
058D:  BCF    03.6
058E:  BCF    1F.4
058F:  BCF    1F.5
0590:  MOVLW  00
0591:  BSF    03.6
0592:  MOVWF  08
0593:  BCF    03.5
0594:  CLRF   07
0595:  CLRF   08
0596:  CLRF   09
0597:  BCF    03.7
.................... {  
....................    set_tris_a(0);
0598:  MOVLW  00
0599:  BSF    03.5
059A:  BCF    03.6
059B:  MOVWF  05
....................    set_tris_b(0xff);
059C:  MOVLW  FF
059D:  MOVWF  06
....................    set_tris_c(0X09);
059E:  MOVLW  09
059F:  MOVWF  07
05A0:  BCF    03.5
05A1:  MOVWF  20
....................    set_tris_d(0);
05A2:  MOVLW  00
05A3:  BSF    03.5
05A4:  MOVWF  08
....................    set_tris_e(0);
05A5:  BCF    09.0
05A6:  BCF    09.1
05A7:  BCF    09.2
05A8:  BCF    09.3
....................    setup_timer_1(t1_external|t1_div_by_1);
05A9:  MOVLW  07
05AA:  BCF    03.5
05AB:  MOVWF  10
....................    set_timer1(0);
05AC:  CLRF   0E
05AD:  CLRF   0F
05AE:  CLRF   0E
05AF:  NOP
....................    setup_timer_0(t0_internal|t0_div_256);
05B0:  BSF    03.5
05B1:  MOVF   01,W
05B2:  ANDLW  C0
05B3:  IORLW  07
05B4:  MOVWF  01
....................    set_timer0(100);
05B5:  MOVLW  64
05B6:  BCF    03.5
05B7:  MOVWF  01
....................    lcd_init();
05B8:  GOTO   12C
....................    lcd_gotoxy(1,2);
05B9:  MOVLW  01
05BA:  MOVWF  40
05BB:  MOVLW  02
05BC:  MOVWF  41
05BD:  CALL   182
....................    printf(lcd_putc,"GIOI HAN: %02u", gioihan);
05BE:  MOVLW  37
05BF:  BSF    03.6
05C0:  MOVWF  0D
05C1:  MOVLW  00
05C2:  MOVWF  0F
05C3:  BCF    03.0
05C4:  MOVLW  0A
05C5:  BCF    03.6
05C6:  MOVWF  34
05C7:  CALL   1C0
05C8:  MOVF   29,W
05C9:  MOVWF  34
05CA:  MOVLW  01
05CB:  MOVWF  35
05CC:  CALL   22C
....................    while(true)
....................    {
....................       nangsuat();
05CD:  GOTO   2B0
....................       quetled();
05CE:  GOTO   34D
....................       matranphim();
05CF:  GOTO   42B
....................       datgioihan();
05D0:  GOTO   4BA
....................       demsp(gioihan);
05D1:  MOVF   29,W
05D2:  MOVWF  33
05D3:  GOTO   504
05D4:  GOTO   5CD
....................       
....................    }
.................... }
.................... 
05D5:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
